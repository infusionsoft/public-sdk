/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiCallback;
import com.infusionsoft.ApiClient;
import com.infusionsoft.ApiException;
import com.infusionsoft.ApiResponse;
import com.infusionsoft.Configuration;
import com.infusionsoft.Pair;
import com.infusionsoft.ProgressRequestBody;
import com.infusionsoft.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftNote;
import com.infusionsoft.model.InfusionsoftNoteList;
import com.infusionsoft.model.InfusionsoftRequestNote;
import com.infusionsoft.model.InfusionsoftUpdateNote;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NoteApi {
    private ApiClient apiClient;

    public NoteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NoteApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createNoteUsingPOST
     * @param createNote createNote (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNoteUsingPOSTCall(InfusionsoftRequestNote createNote, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createNote;

        // create path and map variables
        String localVarPath = "/notes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNoteUsingPOSTValidateBeforeCall(InfusionsoftRequestNote createNote, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createNote' is set
        if (createNote == null) {
            throw new ApiException("Missing the required parameter 'createNote' when calling createNoteUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createNoteUsingPOSTCall(createNote, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Note
     * Creates a new note as the authenticated user. Either a \&quot;title\&quot; or \&quot;body\&quot; is required
     * @param createNote createNote (required)
     * @return InfusionsoftNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftNote createNoteUsingPOST(InfusionsoftRequestNote createNote) throws ApiException {
        ApiResponse<InfusionsoftNote> resp = createNoteUsingPOSTWithHttpInfo(createNote);
        return resp.getData();
    }

    /**
     * Create a Note
     * Creates a new note as the authenticated user. Either a \&quot;title\&quot; or \&quot;body\&quot; is required
     * @param createNote createNote (required)
     * @return ApiResponse&lt;InfusionsoftNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftNote> createNoteUsingPOSTWithHttpInfo(InfusionsoftRequestNote createNote) throws ApiException {
        com.squareup.okhttp.Call call = createNoteUsingPOSTValidateBeforeCall(createNote, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftNote>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Note (asynchronously)
     * Creates a new note as the authenticated user. Either a \&quot;title\&quot; or \&quot;body\&quot; is required
     * @param createNote createNote (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNoteUsingPOSTAsync(InfusionsoftRequestNote createNote, final ApiCallback<InfusionsoftNote> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNoteUsingPOSTValidateBeforeCall(createNote, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftNote>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNoteUsingDELETE
     * @param noteId noteId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNoteUsingDELETECall(Long noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notes/{noteId}"
            .replaceAll("\\{" + "noteId" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNoteUsingDELETEValidateBeforeCall(Long noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteNoteUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNoteUsingDELETECall(noteId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Note
     * Deletes a note
     * @param noteId noteId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNoteUsingDELETE(Long noteId) throws ApiException {
        deleteNoteUsingDELETEWithHttpInfo(noteId);
    }

    /**
     * Delete a Note
     * Deletes a note
     * @param noteId noteId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNoteUsingDELETEWithHttpInfo(Long noteId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNoteUsingDELETEValidateBeforeCall(noteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Note (asynchronously)
     * Deletes a note
     * @param noteId noteId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNoteUsingDELETEAsync(Long noteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNoteUsingDELETEValidateBeforeCall(noteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getNoteUsingGET
     * @param noteId noteId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNoteUsingGETCall(Long noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notes/{noteId}"
            .replaceAll("\\{" + "noteId" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNoteUsingGETValidateBeforeCall(Long noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getNoteUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getNoteUsingGETCall(noteId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Note
     * Retrieves a single note
     * @param noteId noteId (required)
     * @return InfusionsoftNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftNote getNoteUsingGET(Long noteId) throws ApiException {
        ApiResponse<InfusionsoftNote> resp = getNoteUsingGETWithHttpInfo(noteId);
        return resp.getData();
    }

    /**
     * Retrieve a Note
     * Retrieves a single note
     * @param noteId noteId (required)
     * @return ApiResponse&lt;InfusionsoftNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftNote> getNoteUsingGETWithHttpInfo(Long noteId) throws ApiException {
        com.squareup.okhttp.Call call = getNoteUsingGETValidateBeforeCall(noteId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftNote>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Note (asynchronously)
     * Retrieves a single note
     * @param noteId noteId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNoteUsingGETAsync(Long noteId, final ApiCallback<InfusionsoftNote> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNoteUsingGETValidateBeforeCall(noteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftNote>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNotesUsingGET
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param userId Filter based on the user id assigned to the note. (optional)
     * @param contactId Filter based on the contact id assigned to the note. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNotesUsingGETCall(Integer limit, Integer offset, Long userId, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (contactId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contact_id", contactId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNotesUsingGETValidateBeforeCall(Integer limit, Integer offset, Long userId, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listNotesUsingGETCall(limit, offset, userId, contactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Notes
     * Retrieves a list of all notes
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param userId Filter based on the user id assigned to the note. (optional)
     * @param contactId Filter based on the contact id assigned to the note. (optional)
     * @return InfusionsoftNoteList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftNoteList listNotesUsingGET(Integer limit, Integer offset, Long userId, Long contactId) throws ApiException {
        ApiResponse<InfusionsoftNoteList> resp = listNotesUsingGETWithHttpInfo(limit, offset, userId, contactId);
        return resp.getData();
    }

    /**
     * List Notes
     * Retrieves a list of all notes
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param userId Filter based on the user id assigned to the note. (optional)
     * @param contactId Filter based on the contact id assigned to the note. (optional)
     * @return ApiResponse&lt;InfusionsoftNoteList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftNoteList> listNotesUsingGETWithHttpInfo(Integer limit, Integer offset, Long userId, Long contactId) throws ApiException {
        com.squareup.okhttp.Call call = listNotesUsingGETValidateBeforeCall(limit, offset, userId, contactId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftNoteList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Notes (asynchronously)
     * Retrieves a list of all notes
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param userId Filter based on the user id assigned to the note. (optional)
     * @param contactId Filter based on the contact id assigned to the note. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNotesUsingGETAsync(Integer limit, Integer offset, Long userId, Long contactId, final ApiCallback<InfusionsoftNoteList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNotesUsingGETValidateBeforeCall(limit, offset, userId, contactId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftNoteList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNoteUsingPUT
     * @param note note (required)
     * @param requestNote requestNote (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNoteUsingPUTCall(Long note, InfusionsoftRequestNote requestNote, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestNote;

        // create path and map variables
        String localVarPath = "/notes/{noteId}"
            .replaceAll("\\{" + "note" + "\\}", apiClient.escapeString(note.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNoteUsingPUTValidateBeforeCall(Long note, InfusionsoftRequestNote requestNote, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'note' is set
        if (note == null) {
            throw new ApiException("Missing the required parameter 'note' when calling updateNoteUsingPUT(Async)");
        }
        
        // verify the required parameter 'requestNote' is set
        if (requestNote == null) {
            throw new ApiException("Missing the required parameter 'requestNote' when calling updateNoteUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNoteUsingPUTCall(note, requestNote, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace a Note
     * Replaces all values of a given note
     * @param note note (required)
     * @param requestNote requestNote (required)
     * @return InfusionsoftNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftNote updateNoteUsingPUT(Long note, InfusionsoftRequestNote requestNote) throws ApiException {
        ApiResponse<InfusionsoftNote> resp = updateNoteUsingPUTWithHttpInfo(note, requestNote);
        return resp.getData();
    }

    /**
     * Replace a Note
     * Replaces all values of a given note
     * @param note note (required)
     * @param requestNote requestNote (required)
     * @return ApiResponse&lt;InfusionsoftNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftNote> updateNoteUsingPUTWithHttpInfo(Long note, InfusionsoftRequestNote requestNote) throws ApiException {
        com.squareup.okhttp.Call call = updateNoteUsingPUTValidateBeforeCall(note, requestNote, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftNote>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace a Note (asynchronously)
     * Replaces all values of a given note
     * @param note note (required)
     * @param requestNote requestNote (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNoteUsingPUTAsync(Long note, InfusionsoftRequestNote requestNote, final ApiCallback<InfusionsoftNote> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNoteUsingPUTValidateBeforeCall(note, requestNote, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftNote>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePropertiesOnNoteUsingPATCH
     * @param noteId noteId (required)
     * @param note note (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePropertiesOnNoteUsingPATCHCall(Long noteId, InfusionsoftUpdateNote note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = note;

        // create path and map variables
        String localVarPath = "/notes/{noteId}"
            .replaceAll("\\{" + "noteId" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePropertiesOnNoteUsingPATCHValidateBeforeCall(Long noteId, InfusionsoftUpdateNote note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling updatePropertiesOnNoteUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePropertiesOnNoteUsingPATCHCall(noteId, note, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Note
     * Updates a note with only the values provided in the request
     * @param noteId noteId (required)
     * @param note note (optional)
     * @return InfusionsoftNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftNote updatePropertiesOnNoteUsingPATCH(Long noteId, InfusionsoftUpdateNote note) throws ApiException {
        ApiResponse<InfusionsoftNote> resp = updatePropertiesOnNoteUsingPATCHWithHttpInfo(noteId, note);
        return resp.getData();
    }

    /**
     * Update a Note
     * Updates a note with only the values provided in the request
     * @param noteId noteId (required)
     * @param note note (optional)
     * @return ApiResponse&lt;InfusionsoftNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftNote> updatePropertiesOnNoteUsingPATCHWithHttpInfo(Long noteId, InfusionsoftUpdateNote note) throws ApiException {
        com.squareup.okhttp.Call call = updatePropertiesOnNoteUsingPATCHValidateBeforeCall(noteId, note, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftNote>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Note (asynchronously)
     * Updates a note with only the values provided in the request
     * @param noteId noteId (required)
     * @param note note (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePropertiesOnNoteUsingPATCHAsync(Long noteId, InfusionsoftUpdateNote note, final ApiCallback<InfusionsoftNote> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePropertiesOnNoteUsingPATCHValidateBeforeCall(noteId, note, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftNote>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
