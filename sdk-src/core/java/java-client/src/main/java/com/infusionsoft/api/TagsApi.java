/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiCallback;
import com.infusionsoft.ApiClient;
import com.infusionsoft.ApiException;
import com.infusionsoft.ApiResponse;
import com.infusionsoft.Configuration;
import com.infusionsoft.Pair;
import com.infusionsoft.ProgressRequestBody;
import com.infusionsoft.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infusionsoft.model.InfusionsoftCreateTag;
import com.infusionsoft.model.InfusionsoftCreateTagCategory;
import com.infusionsoft.model.InfusionsoftEntrylongstring;
import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftSetOfIds;
import com.infusionsoft.model.InfusionsoftTag;
import com.infusionsoft.model.InfusionsoftTagCategory;
import com.infusionsoft.model.InfusionsoftTaggedCompanyList;
import com.infusionsoft.model.InfusionsoftTaggedContactList;
import com.infusionsoft.model.InfusionsoftTags;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TagsApi {
    private ApiClient apiClient;

    public TagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TagsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for applyTagToContactIdsUsingPOST
     * @param tagId tagId (required)
     * @param ids ids (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call applyTagToContactIdsUsingPOSTCall(Long tagId, InfusionsoftSetOfIds ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ids;

        // create path and map variables
        String localVarPath = "/tags/{tagId}/contacts"
            .replaceAll("\\{" + "tagId" + "\\}", apiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call applyTagToContactIdsUsingPOSTValidateBeforeCall(Long tagId, InfusionsoftSetOfIds ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling applyTagToContactIdsUsingPOST(Async)");
        }
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling applyTagToContactIdsUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = applyTagToContactIdsUsingPOSTCall(tagId, ids, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Apply Tag to Contacts
     * Apply a tag to a list of contacts
     * @param tagId tagId (required)
     * @param ids ids (required)
     * @return List&lt;InfusionsoftEntrylongstring&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InfusionsoftEntrylongstring> applyTagToContactIdsUsingPOST(Long tagId, InfusionsoftSetOfIds ids) throws ApiException {
        ApiResponse<List<InfusionsoftEntrylongstring>> resp = applyTagToContactIdsUsingPOSTWithHttpInfo(tagId, ids);
        return resp.getData();
    }

    /**
     * Apply Tag to Contacts
     * Apply a tag to a list of contacts
     * @param tagId tagId (required)
     * @param ids ids (required)
     * @return ApiResponse&lt;List&lt;InfusionsoftEntrylongstring&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InfusionsoftEntrylongstring>> applyTagToContactIdsUsingPOSTWithHttpInfo(Long tagId, InfusionsoftSetOfIds ids) throws ApiException {
        com.squareup.okhttp.Call call = applyTagToContactIdsUsingPOSTValidateBeforeCall(tagId, ids, null, null);
        Type localVarReturnType = new TypeToken<List<InfusionsoftEntrylongstring>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Apply Tag to Contacts (asynchronously)
     * Apply a tag to a list of contacts
     * @param tagId tagId (required)
     * @param ids ids (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call applyTagToContactIdsUsingPOSTAsync(Long tagId, InfusionsoftSetOfIds ids, final ApiCallback<List<InfusionsoftEntrylongstring>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = applyTagToContactIdsUsingPOSTValidateBeforeCall(tagId, ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InfusionsoftEntrylongstring>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTagCategoryUsingPOST
     * @param tagCategory tagCategory (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTagCategoryUsingPOSTCall(InfusionsoftCreateTagCategory tagCategory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tagCategory;

        // create path and map variables
        String localVarPath = "/tags/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTagCategoryUsingPOSTValidateBeforeCall(InfusionsoftCreateTagCategory tagCategory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tagCategory' is set
        if (tagCategory == null) {
            throw new ApiException("Missing the required parameter 'tagCategory' when calling createTagCategoryUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createTagCategoryUsingPOSTCall(tagCategory, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Tag Category
     * Create a new tag category
     * @param tagCategory tagCategory (required)
     * @return InfusionsoftTagCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTagCategory createTagCategoryUsingPOST(InfusionsoftCreateTagCategory tagCategory) throws ApiException {
        ApiResponse<InfusionsoftTagCategory> resp = createTagCategoryUsingPOSTWithHttpInfo(tagCategory);
        return resp.getData();
    }

    /**
     * Create Tag Category
     * Create a new tag category
     * @param tagCategory tagCategory (required)
     * @return ApiResponse&lt;InfusionsoftTagCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTagCategory> createTagCategoryUsingPOSTWithHttpInfo(InfusionsoftCreateTagCategory tagCategory) throws ApiException {
        com.squareup.okhttp.Call call = createTagCategoryUsingPOSTValidateBeforeCall(tagCategory, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTagCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Tag Category (asynchronously)
     * Create a new tag category
     * @param tagCategory tagCategory (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTagCategoryUsingPOSTAsync(InfusionsoftCreateTagCategory tagCategory, final ApiCallback<InfusionsoftTagCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTagCategoryUsingPOSTValidateBeforeCall(tagCategory, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTagCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTagUsingPOST
     * @param tag tag (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTagUsingPOSTCall(InfusionsoftCreateTag tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tag;

        // create path and map variables
        String localVarPath = "/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTagUsingPOSTValidateBeforeCall(InfusionsoftCreateTag tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling createTagUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createTagUsingPOSTCall(tag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Tag
     * Create a new tag
     * @param tag tag (required)
     * @return InfusionsoftTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTag createTagUsingPOST(InfusionsoftCreateTag tag) throws ApiException {
        ApiResponse<InfusionsoftTag> resp = createTagUsingPOSTWithHttpInfo(tag);
        return resp.getData();
    }

    /**
     * Create Tag
     * Create a new tag
     * @param tag tag (required)
     * @return ApiResponse&lt;InfusionsoftTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTag> createTagUsingPOSTWithHttpInfo(InfusionsoftCreateTag tag) throws ApiException {
        com.squareup.okhttp.Call call = createTagUsingPOSTValidateBeforeCall(tag, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTag>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Tag (asynchronously)
     * Create a new tag
     * @param tag tag (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTagUsingPOSTAsync(InfusionsoftCreateTag tag, final ApiCallback<InfusionsoftTag> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTagUsingPOSTValidateBeforeCall(tag, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTag>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTagUsingGET
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTagUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTagUsingGETValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTagUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getTagUsingGETCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Tag
     * Retrieves a single tag
     * @param id id (required)
     * @return InfusionsoftTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTag getTagUsingGET(Long id) throws ApiException {
        ApiResponse<InfusionsoftTag> resp = getTagUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieve a Tag
     * Retrieves a single tag
     * @param id id (required)
     * @return ApiResponse&lt;InfusionsoftTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTag> getTagUsingGETWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getTagUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTag>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Tag (asynchronously)
     * Retrieves a single tag
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTagUsingGETAsync(Long id, final ApiCallback<InfusionsoftTag> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTagUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTag>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCompaniesForTagIdUsingGET
     * @param tagId tagId (required)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCompaniesForTagIdUsingGETCall(Long tagId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tagId}/companies"
            .replaceAll("\\{" + "tagId" + "\\}", apiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCompaniesForTagIdUsingGETValidateBeforeCall(Long tagId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling listCompaniesForTagIdUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = listCompaniesForTagIdUsingGETCall(tagId, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Tagged Companies
     * Retrieves a list of companies that have the given tag applied
     * @param tagId tagId (required)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @return InfusionsoftTaggedCompanyList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTaggedCompanyList listCompaniesForTagIdUsingGET(Long tagId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<InfusionsoftTaggedCompanyList> resp = listCompaniesForTagIdUsingGETWithHttpInfo(tagId, limit, offset);
        return resp.getData();
    }

    /**
     * List Tagged Companies
     * Retrieves a list of companies that have the given tag applied
     * @param tagId tagId (required)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @return ApiResponse&lt;InfusionsoftTaggedCompanyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTaggedCompanyList> listCompaniesForTagIdUsingGETWithHttpInfo(Long tagId, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = listCompaniesForTagIdUsingGETValidateBeforeCall(tagId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTaggedCompanyList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Tagged Companies (asynchronously)
     * Retrieves a list of companies that have the given tag applied
     * @param tagId tagId (required)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCompaniesForTagIdUsingGETAsync(Long tagId, Integer limit, Integer offset, final ApiCallback<InfusionsoftTaggedCompanyList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCompaniesForTagIdUsingGETValidateBeforeCall(tagId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTaggedCompanyList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listContactsForTagIdUsingGET
     * @param tagId tagId (required)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listContactsForTagIdUsingGETCall(Long tagId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tagId}/contacts"
            .replaceAll("\\{" + "tagId" + "\\}", apiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listContactsForTagIdUsingGETValidateBeforeCall(Long tagId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling listContactsForTagIdUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = listContactsForTagIdUsingGETCall(tagId, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Tagged Contacts
     * Retrieves a list of contacts that have the given tag applied
     * @param tagId tagId (required)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @return InfusionsoftTaggedContactList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTaggedContactList listContactsForTagIdUsingGET(Long tagId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<InfusionsoftTaggedContactList> resp = listContactsForTagIdUsingGETWithHttpInfo(tagId, limit, offset);
        return resp.getData();
    }

    /**
     * List Tagged Contacts
     * Retrieves a list of contacts that have the given tag applied
     * @param tagId tagId (required)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @return ApiResponse&lt;InfusionsoftTaggedContactList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTaggedContactList> listContactsForTagIdUsingGETWithHttpInfo(Long tagId, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = listContactsForTagIdUsingGETValidateBeforeCall(tagId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTaggedContactList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Tagged Contacts (asynchronously)
     * Retrieves a list of contacts that have the given tag applied
     * @param tagId tagId (required)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listContactsForTagIdUsingGETAsync(Long tagId, Integer limit, Integer offset, final ApiCallback<InfusionsoftTaggedContactList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listContactsForTagIdUsingGETValidateBeforeCall(tagId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTaggedContactList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTagsUsingGET
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param category Category Id of tags to filter by (optional)
     * @param name Filter for tags with a specific name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTagsUsingGETCall(Integer limit, Integer offset, Long category, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTagsUsingGETValidateBeforeCall(Integer limit, Integer offset, Long category, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listTagsUsingGETCall(limit, offset, category, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Tags
     * Retrieve a list of tags defined in the application
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param category Category Id of tags to filter by (optional)
     * @param name Filter for tags with a specific name (optional)
     * @return InfusionsoftTags
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTags listTagsUsingGET(Integer limit, Integer offset, Long category, String name) throws ApiException {
        ApiResponse<InfusionsoftTags> resp = listTagsUsingGETWithHttpInfo(limit, offset, category, name);
        return resp.getData();
    }

    /**
     * List Tags
     * Retrieve a list of tags defined in the application
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param category Category Id of tags to filter by (optional)
     * @param name Filter for tags with a specific name (optional)
     * @return ApiResponse&lt;InfusionsoftTags&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTags> listTagsUsingGETWithHttpInfo(Integer limit, Integer offset, Long category, String name) throws ApiException {
        com.squareup.okhttp.Call call = listTagsUsingGETValidateBeforeCall(limit, offset, category, name, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTags>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Tags (asynchronously)
     * Retrieve a list of tags defined in the application
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param category Category Id of tags to filter by (optional)
     * @param name Filter for tags with a specific name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTagsUsingGETAsync(Integer limit, Integer offset, Long category, String name, final ApiCallback<InfusionsoftTags> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTagsUsingGETValidateBeforeCall(limit, offset, category, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTags>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeTagFromContactIdUsingDELETE
     * @param tagId tagId (required)
     * @param contactId contactId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeTagFromContactIdUsingDELETECall(Long tagId, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tagId}/contacts/{contactId}"
            .replaceAll("\\{" + "tagId" + "\\}", apiClient.escapeString(tagId.toString()))
            .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeTagFromContactIdUsingDELETEValidateBeforeCall(Long tagId, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling removeTagFromContactIdUsingDELETE(Async)");
        }
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling removeTagFromContactIdUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = removeTagFromContactIdUsingDELETECall(tagId, contactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove Tag from Contact
     * Remove a tag from a Contact
     * @param tagId tagId (required)
     * @param contactId contactId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeTagFromContactIdUsingDELETE(Long tagId, Long contactId) throws ApiException {
        removeTagFromContactIdUsingDELETEWithHttpInfo(tagId, contactId);
    }

    /**
     * Remove Tag from Contact
     * Remove a tag from a Contact
     * @param tagId tagId (required)
     * @param contactId contactId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeTagFromContactIdUsingDELETEWithHttpInfo(Long tagId, Long contactId) throws ApiException {
        com.squareup.okhttp.Call call = removeTagFromContactIdUsingDELETEValidateBeforeCall(tagId, contactId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove Tag from Contact (asynchronously)
     * Remove a tag from a Contact
     * @param tagId tagId (required)
     * @param contactId contactId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeTagFromContactIdUsingDELETEAsync(Long tagId, Long contactId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeTagFromContactIdUsingDELETEValidateBeforeCall(tagId, contactId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeTagFromContactIdsUsingDELETE
     * @param tagId tagId (required)
     * @param ids ids (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeTagFromContactIdsUsingDELETECall(Long tagId, List<Long> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tagId}/contacts"
            .replaceAll("\\{" + "tagId" + "\\}", apiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ids != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeTagFromContactIdsUsingDELETEValidateBeforeCall(Long tagId, List<Long> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling removeTagFromContactIdsUsingDELETE(Async)");
        }
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeTagFromContactIdsUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = removeTagFromContactIdsUsingDELETECall(tagId, ids, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove Tag from Contacts
     * Remove a tag from a list of contacts
     * @param tagId tagId (required)
     * @param ids ids (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeTagFromContactIdsUsingDELETE(Long tagId, List<Long> ids) throws ApiException {
        removeTagFromContactIdsUsingDELETEWithHttpInfo(tagId, ids);
    }

    /**
     * Remove Tag from Contacts
     * Remove a tag from a list of contacts
     * @param tagId tagId (required)
     * @param ids ids (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeTagFromContactIdsUsingDELETEWithHttpInfo(Long tagId, List<Long> ids) throws ApiException {
        com.squareup.okhttp.Call call = removeTagFromContactIdsUsingDELETEValidateBeforeCall(tagId, ids, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove Tag from Contacts (asynchronously)
     * Remove a tag from a list of contacts
     * @param tagId tagId (required)
     * @param ids ids (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeTagFromContactIdsUsingDELETEAsync(Long tagId, List<Long> ids, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeTagFromContactIdsUsingDELETEValidateBeforeCall(tagId, ids, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
