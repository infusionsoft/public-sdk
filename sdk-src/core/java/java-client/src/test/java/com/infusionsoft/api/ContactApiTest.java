/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiException;
import com.infusionsoft.model.InfusionsoftContactCreditCard;
import com.infusionsoft.model.InfusionsoftContactList;
import com.infusionsoft.model.InfusionsoftContactTagList;
import com.infusionsoft.model.InfusionsoftCreateOrPatchContact;
import com.infusionsoft.model.InfusionsoftCreateRestCustomField;
import com.infusionsoft.model.InfusionsoftCreditCard;
import com.infusionsoft.model.InfusionsoftCreditCardAdded;
import com.infusionsoft.model.InfusionsoftCustomFieldMetaData;
import com.infusionsoft.model.InfusionsoftEmailSentCreate;
import com.infusionsoft.model.InfusionsoftEmailSentQueryResultList;
import com.infusionsoft.model.InfusionsoftEntrylongstring;
import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftFullContact;
import com.infusionsoft.model.InfusionsoftObjectModel;
import com.infusionsoft.model.InfusionsoftTagId;
import com.infusionsoft.model.InfusionsoftUpsertContact;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactApi
 */
@Ignore
public class ContactApiTest {

    private final ContactApi api = new ContactApi();

    
    /**
     * Apply Tags
     *
     * Apply a list of tags to a given contact record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applyTagsToContactIdUsingPOSTTest() throws ApiException {
        Long contactId = null;
        InfusionsoftTagId tagIds = null;
        List<InfusionsoftEntrylongstring> response = api.applyTagsToContactIdUsingPOST(contactId, tagIds);

        // TODO: test validations
    }
    
    /**
     * Create a Contact
     *
     * Creates a new contact as the authenticated user. NB: Contact must contain at least one item in &#x60;email_addresses&#x60; or &#x60;phone_numbers&#x60; and &#x60;country_code&#x60; is required if &#x60;region&#x60; is specified.  Please see the body schema for updates to the postal code field.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \&quot;Customer opted-in through webform\&quot;, \&quot;Contact gave explicit permission.\&quot;  &#x60;&#x60;&#x60;json \&quot;opt_in_reason\&quot;: \&quot;your reason for opt-in\&quot; &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContactUsingPOSTTest() throws ApiException {
        InfusionsoftCreateOrPatchContact contact = null;
        InfusionsoftFullContact response = api.createContactUsingPOST(contact);

        // TODO: test validations
    }
    
    /**
     * Create a Credit Card
     *
     * Creates a new credit card associated to a contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCreditCardUsingPOSTTest() throws ApiException {
        Long contactId = null;
        InfusionsoftCreditCard creditCard = null;
        InfusionsoftCreditCardAdded response = api.createCreditCardUsingPOST(contactId, creditCard);

        // TODO: test validations
    }
    
    /**
     * Create a Custom Field
     *
     * Adds a custom field of the specified type and options to the Contact object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCustomFieldUsingPOSTTest() throws ApiException {
        InfusionsoftCreateRestCustomField customField = null;
        InfusionsoftCustomFieldMetaData response = api.createCustomFieldUsingPOST(customField);

        // TODO: test validations
    }
    
    /**
     * Create an Email Record
     *
     * Create a record of an email sent to a contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEmailForContactUsingPOSTTest() throws ApiException {
        Long contactId = null;
        InfusionsoftEmailSentCreate emailWithContent = null;
        InfusionsoftEmailSentCreate response = api.createEmailForContactUsingPOST(contactId, emailWithContent);

        // TODO: test validations
    }
    
    /**
     * Create or Update a Contact
     *
     * Creates a new contact or updates a contact as the authenticated user. NB: New Contacts must contain at least one item in &#x60;email_addresses&#x60; or &#x60;phone_numbers&#x60; and &#x60;country_code&#x60; is required if &#x60;region&#x60; is specified. Existing Contacts are updated with only the values provided in the request. Accepts a &#x60;duplicate_option&#x60; which performs duplicate checking by one of the following options: &#x60;Email&#x60;, &#x60;EmailAndName&#x60;, if a match is found using the option provided, the existing contact will be updated. If an existing contact was not found using the &#x60;duplicate_option&#x60; provided, a new contact record will be created.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \&quot;Customer opted-in through webform\&quot;, \&quot;Contact gave explicit permission.\&quot;  &#x60;&#x60;&#x60;json \&quot;opt_in_reason\&quot;: \&quot;your reason for opt-in\&quot; &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateContactUsingPUTTest() throws ApiException {
        InfusionsoftUpsertContact contact = null;
        InfusionsoftFullContact response = api.createOrUpdateContactUsingPUT(contact);

        // TODO: test validations
    }
    
    /**
     * Delete a Contact with GDPR Redaction
     *
     * Deletes the specified contact.   If a request header named &#x60;GDPR-Redact&#x60; is included, the contact will instead be redacted according to [GDPR guidlines](https://gdpr-info.eu/). Redacting a contact will remove all personally identifiable information and cannot be undone.This method is private due to SpringFox documentation generation limitations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generalDataProtectionRegulationRedactUsingDELETETest() throws ApiException {
        Long contactId = null;
        String gdPRRedact = null;
        api.generalDataProtectionRegulationRedactUsingDELETE(contactId, gdPRRedact);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Contact
     *
     * Retrieves a single contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactUsingGETTest() throws ApiException {
        Long id = null;
        List<String> optionalProperties = null;
        InfusionsoftFullContact response = api.getContactUsingGET(id, optionalProperties);

        // TODO: test validations
    }
    
    /**
     * List Applied Tags
     *
     * Retrieves a list of tags applied to a given contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAppliedTagsUsingGETTest() throws ApiException {
        Long contactId = null;
        Integer limit = null;
        Integer offset = null;
        InfusionsoftContactTagList response = api.listAppliedTagsUsingGET(contactId, limit, offset);

        // TODO: test validations
    }
    
    /**
     * List Contacts
     *
     * Retrieves a list of all contacts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listContactsUsingGETTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String email = null;
        String givenName = null;
        String familyName = null;
        String order = null;
        String orderDirection = null;
        InfusionsoftContactList response = api.listContactsUsingGET(limit, offset, email, givenName, familyName, order, orderDirection);

        // TODO: test validations
    }
    
    /**
     * Retrieve Credit Cards
     *
     * List all Credit Cards on a contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCreditCardsUsingGETTest() throws ApiException {
        Long contactId = null;
        List<InfusionsoftContactCreditCard> response = api.listCreditCardsUsingGET(contactId);

        // TODO: test validations
    }
    
    /**
     * List Emails
     *
     * List Emails that have been sent to a Contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEmailsForContactUsingGETTest() throws ApiException {
        Long contactId = null;
        Integer limit = null;
        Integer offset = null;
        String email = null;
        InfusionsoftEmailSentQueryResultList response = api.listEmailsForContactUsingGET(contactId, limit, offset, email);

        // TODO: test validations
    }
    
    /**
     * Remove Applied Tags
     *
     * Removes a list of tags from the given contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTagsFromContactUsingDELETETest() throws ApiException {
        Long contactId = null;
        String ids = null;
        api.removeTagsFromContactUsingDELETE(contactId, ids);

        // TODO: test validations
    }
    
    /**
     * Remove Applied Tag
     *
     * Removes a tag from the given contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTagsFromContactUsingDELETE1Test() throws ApiException {
        Long contactId = null;
        Long tagId = null;
        api.removeTagsFromContactUsingDELETE1(contactId, tagId);

        // TODO: test validations
    }
    
    /**
     * Retrieve Contact Model
     *
     * Get the custom fields and optional properties for the Contact object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContactModelUsingGETTest() throws ApiException {
        InfusionsoftObjectModel response = api.retrieveContactModelUsingGET();

        // TODO: test validations
    }
    
    /**
     * Update a Contact
     *
     * Updates a contact with only the values provided in the request.  You may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \&quot;Customer opted-in through webform\&quot;, \&quot;Contact gave explicit permission.\&quot;  &#x60;&#x60;&#x60;json \&quot;opt_in_reason\&quot;: \&quot;your reason for opt-in\&quot; &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePropertiesOnContactUsingPATCH1Test() throws ApiException {
        Long contactId = null;
        InfusionsoftCreateOrPatchContact contact = null;
        InfusionsoftFullContact response = api.updatePropertiesOnContactUsingPATCH1(contactId, contact);

        // TODO: test validations
    }
    
}
