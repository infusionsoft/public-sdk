/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiCallback;
import com.infusionsoft.ApiClient;
import com.infusionsoft.ApiException;
import com.infusionsoft.ApiResponse;
import com.infusionsoft.Configuration;
import com.infusionsoft.Pair;
import com.infusionsoft.ProgressRequestBody;
import com.infusionsoft.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infusionsoft.model.InfusionsoftEmailSendRequest;
import com.infusionsoft.model.InfusionsoftEmailSentCreate;
import com.infusionsoft.model.InfusionsoftEmailSentCreateList;
import com.infusionsoft.model.InfusionsoftEmailSentQueryResultList;
import com.infusionsoft.model.InfusionsoftEmailSentQueryResultWithContent;
import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftSetOfIds;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmailApi {
    private ApiClient apiClient;

    public EmailApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmailApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createEmailUsingPOST
     * @param emailWithContent Email records to persist, with content. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEmailUsingPOSTCall(InfusionsoftEmailSentCreate emailWithContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailWithContent;

        // create path and map variables
        String localVarPath = "/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEmailUsingPOSTValidateBeforeCall(InfusionsoftEmailSentCreate emailWithContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createEmailUsingPOSTCall(emailWithContent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an Email Record
     * Create a record of an email sent to a contact
     * @param emailWithContent Email records to persist, with content. (optional)
     * @return InfusionsoftEmailSentCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftEmailSentCreate createEmailUsingPOST(InfusionsoftEmailSentCreate emailWithContent) throws ApiException {
        ApiResponse<InfusionsoftEmailSentCreate> resp = createEmailUsingPOSTWithHttpInfo(emailWithContent);
        return resp.getData();
    }

    /**
     * Create an Email Record
     * Create a record of an email sent to a contact
     * @param emailWithContent Email records to persist, with content. (optional)
     * @return ApiResponse&lt;InfusionsoftEmailSentCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftEmailSentCreate> createEmailUsingPOSTWithHttpInfo(InfusionsoftEmailSentCreate emailWithContent) throws ApiException {
        com.squareup.okhttp.Call call = createEmailUsingPOSTValidateBeforeCall(emailWithContent, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftEmailSentCreate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an Email Record (asynchronously)
     * Create a record of an email sent to a contact
     * @param emailWithContent Email records to persist, with content. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEmailUsingPOSTAsync(InfusionsoftEmailSentCreate emailWithContent, final ApiCallback<InfusionsoftEmailSentCreate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEmailUsingPOSTValidateBeforeCall(emailWithContent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftEmailSentCreate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createEmailsUsingPOST
     * @param emailWithContent Email records to persist, with content. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEmailsUsingPOSTCall(InfusionsoftEmailSentCreateList emailWithContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailWithContent;

        // create path and map variables
        String localVarPath = "/emails/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEmailsUsingPOSTValidateBeforeCall(InfusionsoftEmailSentCreateList emailWithContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createEmailsUsingPOSTCall(emailWithContent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a set of Email Records
     * Create a set of records of emails sent to contacts, maximum 1000 per transaction.
     * @param emailWithContent Email records to persist, with content. (optional)
     * @return InfusionsoftEmailSentCreateList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftEmailSentCreateList createEmailsUsingPOST(InfusionsoftEmailSentCreateList emailWithContent) throws ApiException {
        ApiResponse<InfusionsoftEmailSentCreateList> resp = createEmailsUsingPOSTWithHttpInfo(emailWithContent);
        return resp.getData();
    }

    /**
     * Create a set of Email Records
     * Create a set of records of emails sent to contacts, maximum 1000 per transaction.
     * @param emailWithContent Email records to persist, with content. (optional)
     * @return ApiResponse&lt;InfusionsoftEmailSentCreateList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftEmailSentCreateList> createEmailsUsingPOSTWithHttpInfo(InfusionsoftEmailSentCreateList emailWithContent) throws ApiException {
        com.squareup.okhttp.Call call = createEmailsUsingPOSTValidateBeforeCall(emailWithContent, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftEmailSentCreateList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a set of Email Records (asynchronously)
     * Create a set of records of emails sent to contacts, maximum 1000 per transaction.
     * @param emailWithContent Email records to persist, with content. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEmailsUsingPOSTAsync(InfusionsoftEmailSentCreateList emailWithContent, final ApiCallback<InfusionsoftEmailSentCreateList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEmailsUsingPOSTValidateBeforeCall(emailWithContent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftEmailSentCreateList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmailUsingDELETE
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailUsingDELETECall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailUsingDELETEValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEmailUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEmailUsingDELETECall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an Email Record
     * Delete a specific email record
     * @param id id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteEmailUsingDELETE(Long id) throws ApiException {
        deleteEmailUsingDELETEWithHttpInfo(id);
    }

    /**
     * Delete an Email Record
     * Delete a specific email record
     * @param id id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteEmailUsingDELETEWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailUsingDELETEValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an Email Record (asynchronously)
     * Delete a specific email record
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailUsingDELETEAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailUsingDELETEValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteEmailsUsingPOST
     * @param emailIds emailIds (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailsUsingPOSTCall(InfusionsoftSetOfIds emailIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailIds;

        // create path and map variables
        String localVarPath = "/emails/unsync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailsUsingPOSTValidateBeforeCall(InfusionsoftSetOfIds emailIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'emailIds' is set
        if (emailIds == null) {
            throw new ApiException("Missing the required parameter 'emailIds' when calling deleteEmailsUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEmailsUsingPOSTCall(emailIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Un-sync a batch of Email Records
     * Un-syncs a batch of email records
     * @param emailIds emailIds (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, String> deleteEmailsUsingPOST(InfusionsoftSetOfIds emailIds) throws ApiException {
        ApiResponse<Map<String, String>> resp = deleteEmailsUsingPOSTWithHttpInfo(emailIds);
        return resp.getData();
    }

    /**
     * Un-sync a batch of Email Records
     * Un-syncs a batch of email records
     * @param emailIds emailIds (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, String>> deleteEmailsUsingPOSTWithHttpInfo(InfusionsoftSetOfIds emailIds) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailsUsingPOSTValidateBeforeCall(emailIds, null, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Un-sync a batch of Email Records (asynchronously)
     * Un-syncs a batch of email records
     * @param emailIds emailIds (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailsUsingPOSTAsync(InfusionsoftSetOfIds emailIds, final ApiCallback<Map<String, String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailsUsingPOSTValidateBeforeCall(emailIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailUsingGET
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailUsingGETValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEmailUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailUsingGETCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an Email
     * Retrieves a single email that has been sent
     * @param id id (required)
     * @return InfusionsoftEmailSentQueryResultWithContent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftEmailSentQueryResultWithContent getEmailUsingGET(Long id) throws ApiException {
        ApiResponse<InfusionsoftEmailSentQueryResultWithContent> resp = getEmailUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieve an Email
     * Retrieves a single email that has been sent
     * @param id id (required)
     * @return ApiResponse&lt;InfusionsoftEmailSentQueryResultWithContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftEmailSentQueryResultWithContent> getEmailUsingGETWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getEmailUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftEmailSentQueryResultWithContent>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an Email (asynchronously)
     * Retrieves a single email that has been sent
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailUsingGETAsync(Long id, final ApiCallback<InfusionsoftEmailSentQueryResultWithContent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftEmailSentQueryResultWithContent>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listEmailsUsingGET
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Optional Contact Id to find Emails for (optional)
     * @param email Optional email address to query on (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listEmailsUsingGETCall(Integer limit, Integer offset, Long contactId, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (contactId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contact_id", contactId));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listEmailsUsingGETValidateBeforeCall(Integer limit, Integer offset, Long contactId, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listEmailsUsingGETCall(limit, offset, contactId, email, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Emails
     * Retrieve a list of emails that have been sent
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Optional Contact Id to find Emails for (optional)
     * @param email Optional email address to query on (optional)
     * @return InfusionsoftEmailSentQueryResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftEmailSentQueryResultList listEmailsUsingGET(Integer limit, Integer offset, Long contactId, String email) throws ApiException {
        ApiResponse<InfusionsoftEmailSentQueryResultList> resp = listEmailsUsingGETWithHttpInfo(limit, offset, contactId, email);
        return resp.getData();
    }

    /**
     * List Emails
     * Retrieve a list of emails that have been sent
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Optional Contact Id to find Emails for (optional)
     * @param email Optional email address to query on (optional)
     * @return ApiResponse&lt;InfusionsoftEmailSentQueryResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftEmailSentQueryResultList> listEmailsUsingGETWithHttpInfo(Integer limit, Integer offset, Long contactId, String email) throws ApiException {
        com.squareup.okhttp.Call call = listEmailsUsingGETValidateBeforeCall(limit, offset, contactId, email, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftEmailSentQueryResultList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Emails (asynchronously)
     * Retrieve a list of emails that have been sent
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Optional Contact Id to find Emails for (optional)
     * @param email Optional email address to query on (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listEmailsUsingGETAsync(Integer limit, Integer offset, Long contactId, String email, final ApiCallback<InfusionsoftEmailSentQueryResultList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listEmailsUsingGETValidateBeforeCall(limit, offset, contactId, email, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftEmailSentQueryResultList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendEmailUsingPOST
     * @param emailSendRequest emailSendRequest (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendEmailUsingPOSTCall(InfusionsoftEmailSendRequest emailSendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailSendRequest;

        // create path and map variables
        String localVarPath = "/emails/queue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendEmailUsingPOSTValidateBeforeCall(InfusionsoftEmailSendRequest emailSendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = sendEmailUsingPOSTCall(emailSendRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send an Email
     * Send an Email to a list of Contacts
     * @param emailSendRequest emailSendRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void sendEmailUsingPOST(InfusionsoftEmailSendRequest emailSendRequest) throws ApiException {
        sendEmailUsingPOSTWithHttpInfo(emailSendRequest);
    }

    /**
     * Send an Email
     * Send an Email to a list of Contacts
     * @param emailSendRequest emailSendRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> sendEmailUsingPOSTWithHttpInfo(InfusionsoftEmailSendRequest emailSendRequest) throws ApiException {
        com.squareup.okhttp.Call call = sendEmailUsingPOSTValidateBeforeCall(emailSendRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Send an Email (asynchronously)
     * Send an Email to a list of Contacts
     * @param emailSendRequest emailSendRequest (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendEmailUsingPOSTAsync(InfusionsoftEmailSendRequest emailSendRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendEmailUsingPOSTValidateBeforeCall(emailSendRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateEmailUsingPUT
     * @param id id (required)
     * @param emailWithContent Email records to persist, with content. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailUsingPUTCall(Long id, InfusionsoftEmailSentCreate emailWithContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailWithContent;

        // create path and map variables
        String localVarPath = "/emails/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailUsingPUTValidateBeforeCall(Long id, InfusionsoftEmailSentCreate emailWithContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEmailUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailUsingPUTCall(id, emailWithContent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an Email Record
     * Update a record of an email sent to a contact
     * @param id id (required)
     * @param emailWithContent Email records to persist, with content. (optional)
     * @return InfusionsoftEmailSentCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftEmailSentCreate updateEmailUsingPUT(Long id, InfusionsoftEmailSentCreate emailWithContent) throws ApiException {
        ApiResponse<InfusionsoftEmailSentCreate> resp = updateEmailUsingPUTWithHttpInfo(id, emailWithContent);
        return resp.getData();
    }

    /**
     * Update an Email Record
     * Update a record of an email sent to a contact
     * @param id id (required)
     * @param emailWithContent Email records to persist, with content. (optional)
     * @return ApiResponse&lt;InfusionsoftEmailSentCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftEmailSentCreate> updateEmailUsingPUTWithHttpInfo(Long id, InfusionsoftEmailSentCreate emailWithContent) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailUsingPUTValidateBeforeCall(id, emailWithContent, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftEmailSentCreate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Email Record (asynchronously)
     * Update a record of an email sent to a contact
     * @param id id (required)
     * @param emailWithContent Email records to persist, with content. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailUsingPUTAsync(Long id, InfusionsoftEmailSentCreate emailWithContent, final ApiCallback<InfusionsoftEmailSentCreate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailUsingPUTValidateBeforeCall(id, emailWithContent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftEmailSentCreate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
