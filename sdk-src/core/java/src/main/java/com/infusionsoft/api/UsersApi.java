/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.89421
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiCallback;
import com.infusionsoft.ApiClient;
import com.infusionsoft.ApiException;
import com.infusionsoft.ApiResponse;
import com.infusionsoft.Configuration;
import com.infusionsoft.Pair;
import com.infusionsoft.ProgressRequestBody;
import com.infusionsoft.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infusionsoft.model.InfusionsoftCreateUser;
import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftRestUser;
import com.infusionsoft.model.InfusionsoftUsers;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient apiClient;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createUserUsingPOST
     * @param user user (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserUsingPOSTCall(InfusionsoftCreateUser user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserUsingPOSTValidateBeforeCall(InfusionsoftCreateUser user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createUserUsingPOSTCall(user, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a User
     * Creates a new user record. NB: Users will be invited to the application and remain in the \&quot;Invited\&quot; status until the user accepts the invite. \&quot;Inactive\&quot; users will not take up a user license.
     * @param user user (optional)
     * @return InfusionsoftRestUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftRestUser createUserUsingPOST(InfusionsoftCreateUser user) throws ApiException {
        ApiResponse<InfusionsoftRestUser> resp = createUserUsingPOSTWithHttpInfo(user);
        return resp.getData();
    }

    /**
     * Create a User
     * Creates a new user record. NB: Users will be invited to the application and remain in the \&quot;Invited\&quot; status until the user accepts the invite. \&quot;Inactive\&quot; users will not take up a user license.
     * @param user user (optional)
     * @return ApiResponse&lt;InfusionsoftRestUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftRestUser> createUserUsingPOSTWithHttpInfo(InfusionsoftCreateUser user) throws ApiException {
        com.squareup.okhttp.Call call = createUserUsingPOSTValidateBeforeCall(user, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftRestUser>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a User (asynchronously)
     * Creates a new user record. NB: Users will be invited to the application and remain in the \&quot;Invited\&quot; status until the user accepts the invite. \&quot;Inactive\&quot; users will not take up a user license.
     * @param user user (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserUsingPOSTAsync(InfusionsoftCreateUser user, final ApiCallback<InfusionsoftRestUser> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserUsingPOSTValidateBeforeCall(user, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftRestUser>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listUsersUsingGET
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param includeInactive Include users that are Inactive in results, defaults to TRUE (optional)
     * @param includePartners Include partner users in results, defaults to TRUE (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listUsersUsingGETCall(Integer limit, Integer offset, Boolean includeInactive, Boolean includePartners, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (includeInactive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_inactive", includeInactive));
        if (includePartners != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_partners", includePartners));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listUsersUsingGETValidateBeforeCall(Integer limit, Integer offset, Boolean includeInactive, Boolean includePartners, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listUsersUsingGETCall(limit, offset, includeInactive, includePartners, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Users
     * Retrieves a list of all users
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param includeInactive Include users that are Inactive in results, defaults to TRUE (optional)
     * @param includePartners Include partner users in results, defaults to TRUE (optional)
     * @return InfusionsoftUsers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftUsers listUsersUsingGET(Integer limit, Integer offset, Boolean includeInactive, Boolean includePartners) throws ApiException {
        ApiResponse<InfusionsoftUsers> resp = listUsersUsingGETWithHttpInfo(limit, offset, includeInactive, includePartners);
        return resp.getData();
    }

    /**
     * List Users
     * Retrieves a list of all users
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param includeInactive Include users that are Inactive in results, defaults to TRUE (optional)
     * @param includePartners Include partner users in results, defaults to TRUE (optional)
     * @return ApiResponse&lt;InfusionsoftUsers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftUsers> listUsersUsingGETWithHttpInfo(Integer limit, Integer offset, Boolean includeInactive, Boolean includePartners) throws ApiException {
        com.squareup.okhttp.Call call = listUsersUsingGETValidateBeforeCall(limit, offset, includeInactive, includePartners, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftUsers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Users (asynchronously)
     * Retrieves a list of all users
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param includeInactive Include users that are Inactive in results, defaults to TRUE (optional)
     * @param includePartners Include partner users in results, defaults to TRUE (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listUsersUsingGETAsync(Integer limit, Integer offset, Boolean includeInactive, Boolean includePartners, final ApiCallback<InfusionsoftUsers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listUsersUsingGETValidateBeforeCall(limit, offset, includeInactive, includePartners, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftUsers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
