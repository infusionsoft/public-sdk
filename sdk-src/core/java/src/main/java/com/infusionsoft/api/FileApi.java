/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiCallback;
import com.infusionsoft.ApiClient;
import com.infusionsoft.ApiException;
import com.infusionsoft.ApiResponse;
import com.infusionsoft.Configuration;
import com.infusionsoft.Pair;
import com.infusionsoft.ProgressRequestBody;
import com.infusionsoft.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftFileInformation;
import com.infusionsoft.model.InfusionsoftFileList;
import com.infusionsoft.model.InfusionsoftFileUpload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FileApi {
    private ApiClient apiClient;

    public FileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FileApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createFileUsingPOST
     * @param fileUpload fileUpload (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFileUsingPOSTCall(InfusionsoftFileUpload fileUpload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fileUpload;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFileUsingPOSTValidateBeforeCall(InfusionsoftFileUpload fileUpload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createFileUsingPOSTCall(fileUpload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload File
     * Upload a base64 encoded file. &#x60;contact_id&#x60; is required only when &#x60;file_association&#x60; is &#x60;CONTACT&#x60;.
     * @param fileUpload fileUpload (optional)
     * @return InfusionsoftFileInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftFileInformation createFileUsingPOST(InfusionsoftFileUpload fileUpload) throws ApiException {
        ApiResponse<InfusionsoftFileInformation> resp = createFileUsingPOSTWithHttpInfo(fileUpload);
        return resp.getData();
    }

    /**
     * Upload File
     * Upload a base64 encoded file. &#x60;contact_id&#x60; is required only when &#x60;file_association&#x60; is &#x60;CONTACT&#x60;.
     * @param fileUpload fileUpload (optional)
     * @return ApiResponse&lt;InfusionsoftFileInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftFileInformation> createFileUsingPOSTWithHttpInfo(InfusionsoftFileUpload fileUpload) throws ApiException {
        com.squareup.okhttp.Call call = createFileUsingPOSTValidateBeforeCall(fileUpload, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftFileInformation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload File (asynchronously)
     * Upload a base64 encoded file. &#x60;contact_id&#x60; is required only when &#x60;file_association&#x60; is &#x60;CONTACT&#x60;.
     * @param fileUpload fileUpload (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFileUsingPOSTAsync(InfusionsoftFileUpload fileUpload, final ApiCallback<InfusionsoftFileInformation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFileUsingPOSTValidateBeforeCall(fileUpload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftFileInformation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFileUsingDELETE
     * @param fileId fileId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFileUsingDELETECall(Long fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}"
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFileUsingDELETEValidateBeforeCall(Long fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFileUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFileUsingDELETECall(fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete File
     * Deletes the specified file
     * @param fileId fileId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFileUsingDELETE(Long fileId) throws ApiException {
        deleteFileUsingDELETEWithHttpInfo(fileId);
    }

    /**
     * Delete File
     * Deletes the specified file
     * @param fileId fileId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFileUsingDELETEWithHttpInfo(Long fileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFileUsingDELETEValidateBeforeCall(fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete File (asynchronously)
     * Deletes the specified file
     * @param fileId fileId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFileUsingDELETEAsync(Long fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFileUsingDELETEValidateBeforeCall(fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getFileUsingGET
     * @param fileId fileId (required)
     * @param optionalProperties Comma-delimited list of File properties to include in the response. (Some fields such as &#x60;file_data&#x60; aren&#39;t included, by default.) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileUsingGETCall(Long fileId, List<String> optionalProperties, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{fileId}"
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (optionalProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "optional_properties", optionalProperties));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileUsingGETValidateBeforeCall(Long fileId, List<String> optionalProperties, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getFileUsingGETCall(fileId, optionalProperties, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve File
     * Retrieves metadata about a specific file. Optionally returns the base64 encoded file data.
     * @param fileId fileId (required)
     * @param optionalProperties Comma-delimited list of File properties to include in the response. (Some fields such as &#x60;file_data&#x60; aren&#39;t included, by default.) (optional)
     * @return InfusionsoftFileInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftFileInformation getFileUsingGET(Long fileId, List<String> optionalProperties) throws ApiException {
        ApiResponse<InfusionsoftFileInformation> resp = getFileUsingGETWithHttpInfo(fileId, optionalProperties);
        return resp.getData();
    }

    /**
     * Retrieve File
     * Retrieves metadata about a specific file. Optionally returns the base64 encoded file data.
     * @param fileId fileId (required)
     * @param optionalProperties Comma-delimited list of File properties to include in the response. (Some fields such as &#x60;file_data&#x60; aren&#39;t included, by default.) (optional)
     * @return ApiResponse&lt;InfusionsoftFileInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftFileInformation> getFileUsingGETWithHttpInfo(Long fileId, List<String> optionalProperties) throws ApiException {
        com.squareup.okhttp.Call call = getFileUsingGETValidateBeforeCall(fileId, optionalProperties, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftFileInformation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve File (asynchronously)
     * Retrieves metadata about a specific file. Optionally returns the base64 encoded file data.
     * @param fileId fileId (required)
     * @param optionalProperties Comma-delimited list of File properties to include in the response. (Some fields such as &#x60;file_data&#x60; aren&#39;t included, by default.) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileUsingGETAsync(Long fileId, List<String> optionalProperties, final ApiCallback<InfusionsoftFileInformation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileUsingGETValidateBeforeCall(fileId, optionalProperties, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftFileInformation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listFilesUsingGET
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param viewable Include public or private files in response (PUBLIC or PRIVATE), defaults to BOTH. (optional)
     * @param permission Filter based on the permission of files (USER or COMPANY), defaults to BOTH. (optional)
     * @param type Filter based on the type of file. (optional)
     * @param name Filter files based on name, with &#39;*&#39; preceding or following to indicate LIKE queries. (optional)
     * @param contactId Filter based on Contact Id, if user has permission to see Contact files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listFilesUsingGETCall(Integer limit, Integer offset, String viewable, String permission, String type, String name, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (viewable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("viewable", viewable));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (contactId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contact_id", contactId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listFilesUsingGETValidateBeforeCall(Integer limit, Integer offset, String viewable, String permission, String type, String name, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listFilesUsingGETCall(limit, offset, viewable, permission, type, name, contactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Files
     * Retrieves a list of all files
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param viewable Include public or private files in response (PUBLIC or PRIVATE), defaults to BOTH. (optional)
     * @param permission Filter based on the permission of files (USER or COMPANY), defaults to BOTH. (optional)
     * @param type Filter based on the type of file. (optional)
     * @param name Filter files based on name, with &#39;*&#39; preceding or following to indicate LIKE queries. (optional)
     * @param contactId Filter based on Contact Id, if user has permission to see Contact files. (optional)
     * @return InfusionsoftFileList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftFileList listFilesUsingGET(Integer limit, Integer offset, String viewable, String permission, String type, String name, Long contactId) throws ApiException {
        ApiResponse<InfusionsoftFileList> resp = listFilesUsingGETWithHttpInfo(limit, offset, viewable, permission, type, name, contactId);
        return resp.getData();
    }

    /**
     * List Files
     * Retrieves a list of all files
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param viewable Include public or private files in response (PUBLIC or PRIVATE), defaults to BOTH. (optional)
     * @param permission Filter based on the permission of files (USER or COMPANY), defaults to BOTH. (optional)
     * @param type Filter based on the type of file. (optional)
     * @param name Filter files based on name, with &#39;*&#39; preceding or following to indicate LIKE queries. (optional)
     * @param contactId Filter based on Contact Id, if user has permission to see Contact files. (optional)
     * @return ApiResponse&lt;InfusionsoftFileList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftFileList> listFilesUsingGETWithHttpInfo(Integer limit, Integer offset, String viewable, String permission, String type, String name, Long contactId) throws ApiException {
        com.squareup.okhttp.Call call = listFilesUsingGETValidateBeforeCall(limit, offset, viewable, permission, type, name, contactId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftFileList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Files (asynchronously)
     * Retrieves a list of all files
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param viewable Include public or private files in response (PUBLIC or PRIVATE), defaults to BOTH. (optional)
     * @param permission Filter based on the permission of files (USER or COMPANY), defaults to BOTH. (optional)
     * @param type Filter based on the type of file. (optional)
     * @param name Filter files based on name, with &#39;*&#39; preceding or following to indicate LIKE queries. (optional)
     * @param contactId Filter based on Contact Id, if user has permission to see Contact files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listFilesUsingGETAsync(Integer limit, Integer offset, String viewable, String permission, String type, String name, Long contactId, final ApiCallback<InfusionsoftFileList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listFilesUsingGETValidateBeforeCall(limit, offset, viewable, permission, type, name, contactId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftFileList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFileUsingPUT
     * @param fileId fileId (required)
     * @param fileUpload fileUpload (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFileUsingPUTCall(Long fileId, InfusionsoftFileUpload fileUpload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fileUpload;

        // create path and map variables
        String localVarPath = "/files/{fileId}"
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFileUsingPUTValidateBeforeCall(Long fileId, InfusionsoftFileUpload fileUpload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling updateFileUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFileUsingPUTCall(fileId, fileUpload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace File
     * Upload a base64 encoded file to replace an existing one. &#x60;contact_id&#x60; is required only when &#x60;file_association&#x60; is &#x60;CONTACT&#x60;.
     * @param fileId fileId (required)
     * @param fileUpload fileUpload (optional)
     * @return InfusionsoftFileInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftFileInformation updateFileUsingPUT(Long fileId, InfusionsoftFileUpload fileUpload) throws ApiException {
        ApiResponse<InfusionsoftFileInformation> resp = updateFileUsingPUTWithHttpInfo(fileId, fileUpload);
        return resp.getData();
    }

    /**
     * Replace File
     * Upload a base64 encoded file to replace an existing one. &#x60;contact_id&#x60; is required only when &#x60;file_association&#x60; is &#x60;CONTACT&#x60;.
     * @param fileId fileId (required)
     * @param fileUpload fileUpload (optional)
     * @return ApiResponse&lt;InfusionsoftFileInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftFileInformation> updateFileUsingPUTWithHttpInfo(Long fileId, InfusionsoftFileUpload fileUpload) throws ApiException {
        com.squareup.okhttp.Call call = updateFileUsingPUTValidateBeforeCall(fileId, fileUpload, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftFileInformation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace File (asynchronously)
     * Upload a base64 encoded file to replace an existing one. &#x60;contact_id&#x60; is required only when &#x60;file_association&#x60; is &#x60;CONTACT&#x60;.
     * @param fileId fileId (required)
     * @param fileUpload fileUpload (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFileUsingPUTAsync(Long fileId, InfusionsoftFileUpload fileUpload, final ApiCallback<InfusionsoftFileInformation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFileUsingPUTValidateBeforeCall(fileId, fileUpload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftFileInformation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
