/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.89421
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiCallback;
import com.infusionsoft.ApiClient;
import com.infusionsoft.ApiException;
import com.infusionsoft.ApiResponse;
import com.infusionsoft.Configuration;
import com.infusionsoft.Pair;
import com.infusionsoft.ProgressRequestBody;
import com.infusionsoft.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infusionsoft.model.InfusionsoftAchieveApiGoalEvent;
import com.infusionsoft.model.InfusionsoftCampaign;
import com.infusionsoft.model.InfusionsoftCampaignList;
import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftGoalEventResultDTO;
import com.infusionsoft.model.InfusionsoftSetOfIds;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampaignApi {
    private ApiClient apiClient;

    public CampaignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addContactToCampaignSequenceUsingPOST
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param contactId contactId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addContactToCampaignSequenceUsingPOSTCall(Long campaignId, Long sequenceId, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/sequences/{sequenceId}/contacts/{contactId}"
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()))
            .replaceAll("\\{" + "sequenceId" + "\\}", apiClient.escapeString(sequenceId.toString()))
            .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addContactToCampaignSequenceUsingPOSTValidateBeforeCall(Long campaignId, Long sequenceId, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling addContactToCampaignSequenceUsingPOST(Async)");
        }
        
        // verify the required parameter 'sequenceId' is set
        if (sequenceId == null) {
            throw new ApiException("Missing the required parameter 'sequenceId' when calling addContactToCampaignSequenceUsingPOST(Async)");
        }
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling addContactToCampaignSequenceUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = addContactToCampaignSequenceUsingPOSTCall(campaignId, sequenceId, contactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add to Campaign Sequence
     * Adds a single contact to a campaign sequence
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param contactId contactId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addContactToCampaignSequenceUsingPOST(Long campaignId, Long sequenceId, Long contactId) throws ApiException {
        addContactToCampaignSequenceUsingPOSTWithHttpInfo(campaignId, sequenceId, contactId);
    }

    /**
     * Add to Campaign Sequence
     * Adds a single contact to a campaign sequence
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param contactId contactId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addContactToCampaignSequenceUsingPOSTWithHttpInfo(Long campaignId, Long sequenceId, Long contactId) throws ApiException {
        com.squareup.okhttp.Call call = addContactToCampaignSequenceUsingPOSTValidateBeforeCall(campaignId, sequenceId, contactId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add to Campaign Sequence (asynchronously)
     * Adds a single contact to a campaign sequence
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param contactId contactId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addContactToCampaignSequenceUsingPOSTAsync(Long campaignId, Long sequenceId, Long contactId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addContactToCampaignSequenceUsingPOSTValidateBeforeCall(campaignId, sequenceId, contactId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addContactsToCampaignSequenceUsingPOST
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param ids ids (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addContactsToCampaignSequenceUsingPOSTCall(Long campaignId, Long sequenceId, InfusionsoftSetOfIds ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ids;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/sequences/{sequenceId}/contacts"
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()))
            .replaceAll("\\{" + "sequenceId" + "\\}", apiClient.escapeString(sequenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addContactsToCampaignSequenceUsingPOSTValidateBeforeCall(Long campaignId, Long sequenceId, InfusionsoftSetOfIds ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling addContactsToCampaignSequenceUsingPOST(Async)");
        }
        
        // verify the required parameter 'sequenceId' is set
        if (sequenceId == null) {
            throw new ApiException("Missing the required parameter 'sequenceId' when calling addContactsToCampaignSequenceUsingPOST(Async)");
        }
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling addContactsToCampaignSequenceUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = addContactsToCampaignSequenceUsingPOSTCall(campaignId, sequenceId, ids, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add Multiple to Campaign Sequence
     * Adds a list of contacts to a campaign sequence
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param ids ids (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, String> addContactsToCampaignSequenceUsingPOST(Long campaignId, Long sequenceId, InfusionsoftSetOfIds ids) throws ApiException {
        ApiResponse<Map<String, String>> resp = addContactsToCampaignSequenceUsingPOSTWithHttpInfo(campaignId, sequenceId, ids);
        return resp.getData();
    }

    /**
     * Add Multiple to Campaign Sequence
     * Adds a list of contacts to a campaign sequence
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param ids ids (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, String>> addContactsToCampaignSequenceUsingPOSTWithHttpInfo(Long campaignId, Long sequenceId, InfusionsoftSetOfIds ids) throws ApiException {
        com.squareup.okhttp.Call call = addContactsToCampaignSequenceUsingPOSTValidateBeforeCall(campaignId, sequenceId, ids, null, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Multiple to Campaign Sequence (asynchronously)
     * Adds a list of contacts to a campaign sequence
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param ids ids (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addContactsToCampaignSequenceUsingPOSTAsync(Long campaignId, Long sequenceId, InfusionsoftSetOfIds ids, final ApiCallback<Map<String, String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addContactsToCampaignSequenceUsingPOSTValidateBeforeCall(campaignId, sequenceId, ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAchieveApiGoalEventUsingPOST
     * @param integration integration (required)
     * @param callName callName (required)
     * @param goalEvent goalEvent (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAchieveApiGoalEventUsingPOSTCall(String integration, String callName, InfusionsoftAchieveApiGoalEvent goalEvent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = goalEvent;

        // create path and map variables
        String localVarPath = "/campaigns/goals/{integration}/{callName}"
            .replaceAll("\\{" + "integration" + "\\}", apiClient.escapeString(integration.toString()))
            .replaceAll("\\{" + "callName" + "\\}", apiClient.escapeString(callName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAchieveApiGoalEventUsingPOSTValidateBeforeCall(String integration, String callName, InfusionsoftAchieveApiGoalEvent goalEvent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'integration' is set
        if (integration == null) {
            throw new ApiException("Missing the required parameter 'integration' when calling createAchieveApiGoalEventUsingPOST(Async)");
        }
        
        // verify the required parameter 'callName' is set
        if (callName == null) {
            throw new ApiException("Missing the required parameter 'callName' when calling createAchieveApiGoalEventUsingPOST(Async)");
        }
        
        // verify the required parameter 'goalEvent' is set
        if (goalEvent == null) {
            throw new ApiException("Missing the required parameter 'goalEvent' when calling createAchieveApiGoalEventUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createAchieveApiGoalEventUsingPOSTCall(integration, callName, goalEvent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Achieve API Goal
     * Achieves API goal for campaigns with matching integration, callName for a given contactId
     * @param integration integration (required)
     * @param callName callName (required)
     * @param goalEvent goalEvent (required)
     * @return List&lt;InfusionsoftGoalEventResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InfusionsoftGoalEventResultDTO> createAchieveApiGoalEventUsingPOST(String integration, String callName, InfusionsoftAchieveApiGoalEvent goalEvent) throws ApiException {
        ApiResponse<List<InfusionsoftGoalEventResultDTO>> resp = createAchieveApiGoalEventUsingPOSTWithHttpInfo(integration, callName, goalEvent);
        return resp.getData();
    }

    /**
     * Achieve API Goal
     * Achieves API goal for campaigns with matching integration, callName for a given contactId
     * @param integration integration (required)
     * @param callName callName (required)
     * @param goalEvent goalEvent (required)
     * @return ApiResponse&lt;List&lt;InfusionsoftGoalEventResultDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InfusionsoftGoalEventResultDTO>> createAchieveApiGoalEventUsingPOSTWithHttpInfo(String integration, String callName, InfusionsoftAchieveApiGoalEvent goalEvent) throws ApiException {
        com.squareup.okhttp.Call call = createAchieveApiGoalEventUsingPOSTValidateBeforeCall(integration, callName, goalEvent, null, null);
        Type localVarReturnType = new TypeToken<List<InfusionsoftGoalEventResultDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Achieve API Goal (asynchronously)
     * Achieves API goal for campaigns with matching integration, callName for a given contactId
     * @param integration integration (required)
     * @param callName callName (required)
     * @param goalEvent goalEvent (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAchieveApiGoalEventUsingPOSTAsync(String integration, String callName, InfusionsoftAchieveApiGoalEvent goalEvent, final ApiCallback<List<InfusionsoftGoalEventResultDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAchieveApiGoalEventUsingPOSTValidateBeforeCall(integration, callName, goalEvent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InfusionsoftGoalEventResultDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCampaignUsingGET
     * @param campaignId campaignId (required)
     * @param optionalProperties Comma-delimited list of Campaign properties to include in the response. (The fields &#x60;goals&#x60; and &#x60;sequences&#x60; aren&#39;t included, by default.) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCampaignUsingGETCall(Long campaignId, List<String> optionalProperties, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}"
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (optionalProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "optional_properties", optionalProperties));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCampaignUsingGETValidateBeforeCall(Long campaignId, List<String> optionalProperties, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaignUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getCampaignUsingGETCall(campaignId, optionalProperties, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Campaign
     * Retrieves a single campaign
     * @param campaignId campaignId (required)
     * @param optionalProperties Comma-delimited list of Campaign properties to include in the response. (The fields &#x60;goals&#x60; and &#x60;sequences&#x60; aren&#39;t included, by default.) (optional)
     * @return InfusionsoftCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftCampaign getCampaignUsingGET(Long campaignId, List<String> optionalProperties) throws ApiException {
        ApiResponse<InfusionsoftCampaign> resp = getCampaignUsingGETWithHttpInfo(campaignId, optionalProperties);
        return resp.getData();
    }

    /**
     * Retrieve a Campaign
     * Retrieves a single campaign
     * @param campaignId campaignId (required)
     * @param optionalProperties Comma-delimited list of Campaign properties to include in the response. (The fields &#x60;goals&#x60; and &#x60;sequences&#x60; aren&#39;t included, by default.) (optional)
     * @return ApiResponse&lt;InfusionsoftCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftCampaign> getCampaignUsingGETWithHttpInfo(Long campaignId, List<String> optionalProperties) throws ApiException {
        com.squareup.okhttp.Call call = getCampaignUsingGETValidateBeforeCall(campaignId, optionalProperties, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftCampaign>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Campaign (asynchronously)
     * Retrieves a single campaign
     * @param campaignId campaignId (required)
     * @param optionalProperties Comma-delimited list of Campaign properties to include in the response. (The fields &#x60;goals&#x60; and &#x60;sequences&#x60; aren&#39;t included, by default.) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCampaignUsingGETAsync(Long campaignId, List<String> optionalProperties, final ApiCallback<InfusionsoftCampaign> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCampaignUsingGETValidateBeforeCall(campaignId, optionalProperties, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftCampaign>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCampaignsUsingGET
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param searchText Optional text to search (optional)
     * @param order Attribute to order items by (optional)
     * @param orderDirection How to order the data i.e. ascending (A-Z) or descending (Z-A) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCampaignsUsingGETCall(Integer limit, Integer offset, String searchText, String order, String orderDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (searchText != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search_text", searchText));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        if (orderDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_direction", orderDirection));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCampaignsUsingGETValidateBeforeCall(Integer limit, Integer offset, String searchText, String order, String orderDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listCampaignsUsingGETCall(limit, offset, searchText, order, orderDirection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Campaigns
     * Retrieves all campaigns for the authenticated user
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param searchText Optional text to search (optional)
     * @param order Attribute to order items by (optional)
     * @param orderDirection How to order the data i.e. ascending (A-Z) or descending (Z-A) (optional)
     * @return InfusionsoftCampaignList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftCampaignList listCampaignsUsingGET(Integer limit, Integer offset, String searchText, String order, String orderDirection) throws ApiException {
        ApiResponse<InfusionsoftCampaignList> resp = listCampaignsUsingGETWithHttpInfo(limit, offset, searchText, order, orderDirection);
        return resp.getData();
    }

    /**
     * List Campaigns
     * Retrieves all campaigns for the authenticated user
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param searchText Optional text to search (optional)
     * @param order Attribute to order items by (optional)
     * @param orderDirection How to order the data i.e. ascending (A-Z) or descending (Z-A) (optional)
     * @return ApiResponse&lt;InfusionsoftCampaignList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftCampaignList> listCampaignsUsingGETWithHttpInfo(Integer limit, Integer offset, String searchText, String order, String orderDirection) throws ApiException {
        com.squareup.okhttp.Call call = listCampaignsUsingGETValidateBeforeCall(limit, offset, searchText, order, orderDirection, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftCampaignList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Campaigns (asynchronously)
     * Retrieves all campaigns for the authenticated user
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param searchText Optional text to search (optional)
     * @param order Attribute to order items by (optional)
     * @param orderDirection How to order the data i.e. ascending (A-Z) or descending (Z-A) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCampaignsUsingGETAsync(Integer limit, Integer offset, String searchText, String order, String orderDirection, final ApiCallback<InfusionsoftCampaignList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCampaignsUsingGETValidateBeforeCall(limit, offset, searchText, order, orderDirection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftCampaignList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeContactFromCampaignSequenceUsingDELETE
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param contactId contactId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeContactFromCampaignSequenceUsingDELETECall(Long campaignId, Long sequenceId, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/sequences/{sequenceId}/contacts/{contactId}"
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()))
            .replaceAll("\\{" + "sequenceId" + "\\}", apiClient.escapeString(sequenceId.toString()))
            .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeContactFromCampaignSequenceUsingDELETEValidateBeforeCall(Long campaignId, Long sequenceId, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling removeContactFromCampaignSequenceUsingDELETE(Async)");
        }
        
        // verify the required parameter 'sequenceId' is set
        if (sequenceId == null) {
            throw new ApiException("Missing the required parameter 'sequenceId' when calling removeContactFromCampaignSequenceUsingDELETE(Async)");
        }
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling removeContactFromCampaignSequenceUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = removeContactFromCampaignSequenceUsingDELETECall(campaignId, sequenceId, contactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove from Campaign Sequence
     * Removes a single contact from a campaign sequence
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param contactId contactId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeContactFromCampaignSequenceUsingDELETE(Long campaignId, Long sequenceId, Long contactId) throws ApiException {
        removeContactFromCampaignSequenceUsingDELETEWithHttpInfo(campaignId, sequenceId, contactId);
    }

    /**
     * Remove from Campaign Sequence
     * Removes a single contact from a campaign sequence
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param contactId contactId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeContactFromCampaignSequenceUsingDELETEWithHttpInfo(Long campaignId, Long sequenceId, Long contactId) throws ApiException {
        com.squareup.okhttp.Call call = removeContactFromCampaignSequenceUsingDELETEValidateBeforeCall(campaignId, sequenceId, contactId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove from Campaign Sequence (asynchronously)
     * Removes a single contact from a campaign sequence
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param contactId contactId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeContactFromCampaignSequenceUsingDELETEAsync(Long campaignId, Long sequenceId, Long contactId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeContactFromCampaignSequenceUsingDELETEValidateBeforeCall(campaignId, sequenceId, contactId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeContactsFromCampaignSequenceUsingDELETE
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param ids ids (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeContactsFromCampaignSequenceUsingDELETECall(Long campaignId, Long sequenceId, InfusionsoftSetOfIds ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ids;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/sequences/{sequenceId}/contacts"
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()))
            .replaceAll("\\{" + "sequenceId" + "\\}", apiClient.escapeString(sequenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeContactsFromCampaignSequenceUsingDELETEValidateBeforeCall(Long campaignId, Long sequenceId, InfusionsoftSetOfIds ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling removeContactsFromCampaignSequenceUsingDELETE(Async)");
        }
        
        // verify the required parameter 'sequenceId' is set
        if (sequenceId == null) {
            throw new ApiException("Missing the required parameter 'sequenceId' when calling removeContactsFromCampaignSequenceUsingDELETE(Async)");
        }
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeContactsFromCampaignSequenceUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = removeContactsFromCampaignSequenceUsingDELETECall(campaignId, sequenceId, ids, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove Multiple from Campaign Sequence
     * Removes a list of contacts from a campaign sequence
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param ids ids (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeContactsFromCampaignSequenceUsingDELETE(Long campaignId, Long sequenceId, InfusionsoftSetOfIds ids) throws ApiException {
        removeContactsFromCampaignSequenceUsingDELETEWithHttpInfo(campaignId, sequenceId, ids);
    }

    /**
     * Remove Multiple from Campaign Sequence
     * Removes a list of contacts from a campaign sequence
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param ids ids (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeContactsFromCampaignSequenceUsingDELETEWithHttpInfo(Long campaignId, Long sequenceId, InfusionsoftSetOfIds ids) throws ApiException {
        com.squareup.okhttp.Call call = removeContactsFromCampaignSequenceUsingDELETEValidateBeforeCall(campaignId, sequenceId, ids, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove Multiple from Campaign Sequence (asynchronously)
     * Removes a list of contacts from a campaign sequence
     * @param campaignId campaignId (required)
     * @param sequenceId sequenceId (required)
     * @param ids ids (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeContactsFromCampaignSequenceUsingDELETEAsync(Long campaignId, Long sequenceId, InfusionsoftSetOfIds ids, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeContactsFromCampaignSequenceUsingDELETEValidateBeforeCall(campaignId, sequenceId, ids, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
