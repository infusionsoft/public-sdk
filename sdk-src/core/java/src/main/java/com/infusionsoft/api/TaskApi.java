/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.89421
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiCallback;
import com.infusionsoft.ApiClient;
import com.infusionsoft.ApiException;
import com.infusionsoft.ApiResponse;
import com.infusionsoft.Configuration;
import com.infusionsoft.Pair;
import com.infusionsoft.ProgressRequestBody;
import com.infusionsoft.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infusionsoft.model.InfusionsoftCreateRestCustomField;
import com.infusionsoft.model.InfusionsoftCustomFieldMetaData;
import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftObjectModel;
import com.infusionsoft.model.InfusionsoftTask;
import com.infusionsoft.model.InfusionsoftTaskList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskApi {
    private ApiClient apiClient;

    public TaskApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTaskCustomFieldUsingPOST
     * @param customField customField (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTaskCustomFieldUsingPOSTCall(InfusionsoftCreateRestCustomField customField, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customField;

        // create path and map variables
        String localVarPath = "/tasks/model/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTaskCustomFieldUsingPOSTValidateBeforeCall(InfusionsoftCreateRestCustomField customField, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customField' is set
        if (customField == null) {
            throw new ApiException("Missing the required parameter 'customField' when calling createTaskCustomFieldUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createTaskCustomFieldUsingPOSTCall(customField, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Custom Field
     * Adds a custom field of the specified type and options to the Task object.
     * @param customField customField (required)
     * @return InfusionsoftCustomFieldMetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftCustomFieldMetaData createTaskCustomFieldUsingPOST(InfusionsoftCreateRestCustomField customField) throws ApiException {
        ApiResponse<InfusionsoftCustomFieldMetaData> resp = createTaskCustomFieldUsingPOSTWithHttpInfo(customField);
        return resp.getData();
    }

    /**
     * Create a Custom Field
     * Adds a custom field of the specified type and options to the Task object.
     * @param customField customField (required)
     * @return ApiResponse&lt;InfusionsoftCustomFieldMetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftCustomFieldMetaData> createTaskCustomFieldUsingPOSTWithHttpInfo(InfusionsoftCreateRestCustomField customField) throws ApiException {
        com.squareup.okhttp.Call call = createTaskCustomFieldUsingPOSTValidateBeforeCall(customField, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftCustomFieldMetaData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Custom Field (asynchronously)
     * Adds a custom field of the specified type and options to the Task object.
     * @param customField customField (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTaskCustomFieldUsingPOSTAsync(InfusionsoftCreateRestCustomField customField, final ApiCallback<InfusionsoftCustomFieldMetaData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTaskCustomFieldUsingPOSTValidateBeforeCall(customField, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftCustomFieldMetaData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTaskUsingPOST
     * @param task task (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTaskUsingPOSTCall(InfusionsoftTask task, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = task;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTaskUsingPOSTValidateBeforeCall(InfusionsoftTask task, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'task' is set
        if (task == null) {
            throw new ApiException("Missing the required parameter 'task' when calling createTaskUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createTaskUsingPOSTCall(task, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Task
     * Creates a new task as the authenticated user. NB: Contact must contain at least one item in the fields &#x60;title&#x60; and &#x60;due_date&#x60;. All other attributes are optional
     * @param task task (required)
     * @return InfusionsoftTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTask createTaskUsingPOST(InfusionsoftTask task) throws ApiException {
        ApiResponse<InfusionsoftTask> resp = createTaskUsingPOSTWithHttpInfo(task);
        return resp.getData();
    }

    /**
     * Create a Task
     * Creates a new task as the authenticated user. NB: Contact must contain at least one item in the fields &#x60;title&#x60; and &#x60;due_date&#x60;. All other attributes are optional
     * @param task task (required)
     * @return ApiResponse&lt;InfusionsoftTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTask> createTaskUsingPOSTWithHttpInfo(InfusionsoftTask task) throws ApiException {
        com.squareup.okhttp.Call call = createTaskUsingPOSTValidateBeforeCall(task, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Task (asynchronously)
     * Creates a new task as the authenticated user. NB: Contact must contain at least one item in the fields &#x60;title&#x60; and &#x60;due_date&#x60;. All other attributes are optional
     * @param task task (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTaskUsingPOSTAsync(InfusionsoftTask task, final ApiCallback<InfusionsoftTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTaskUsingPOSTValidateBeforeCall(task, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTaskUsingDELETE
     * @param taskId taskId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTaskUsingDELETECall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTaskUsingDELETEValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteTaskUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTaskUsingDELETECall(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Task
     * Permanently deletes a task
     * @param taskId taskId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTaskUsingDELETE(String taskId) throws ApiException {
        deleteTaskUsingDELETEWithHttpInfo(taskId);
    }

    /**
     * Delete a Task
     * Permanently deletes a task
     * @param taskId taskId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTaskUsingDELETEWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaskUsingDELETEValidateBeforeCall(taskId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Task (asynchronously)
     * Permanently deletes a task
     * @param taskId taskId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaskUsingDELETEAsync(String taskId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaskUsingDELETEValidateBeforeCall(taskId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getTaskUsingGET
     * @param taskId taskId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaskUsingGETCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskUsingGETValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getTaskUsingGETCall(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Task
     * Retrieves a single task
     * @param taskId taskId (required)
     * @return InfusionsoftTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTask getTaskUsingGET(String taskId) throws ApiException {
        ApiResponse<InfusionsoftTask> resp = getTaskUsingGETWithHttpInfo(taskId);
        return resp.getData();
    }

    /**
     * Retrieve a Task
     * Retrieves a single task
     * @param taskId taskId (required)
     * @return ApiResponse&lt;InfusionsoftTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTask> getTaskUsingGETWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = getTaskUsingGETValidateBeforeCall(taskId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Task (asynchronously)
     * Retrieves a single task
     * @param taskId taskId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskUsingGETAsync(String taskId, final ApiCallback<InfusionsoftTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskUsingGETValidateBeforeCall(taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTasksForCurrentUserUsingGET
     * @param contactId Returns tasks for the provided contact id (optional)
     * @param hasDueDate Returns tasks that have an &#39;action date&#39; when set to true (optional)
     * @param userId Returns tasks for the provided user id (optional)
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param completed Sets completed status of items to return (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param order Attribute to order items by (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTasksForCurrentUserUsingGETCall(Long contactId, Boolean hasDueDate, Long userId, String since, String until, Boolean completed, Integer limit, Integer offset, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contactId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contact_id", contactId));
        if (hasDueDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("has_due_date", hasDueDate));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until", until));
        if (completed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("completed", completed));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTasksForCurrentUserUsingGETValidateBeforeCall(Long contactId, Boolean hasDueDate, Long userId, String since, String until, Boolean completed, Integer limit, Integer offset, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listTasksForCurrentUserUsingGETCall(contactId, hasDueDate, userId, since, until, completed, limit, offset, order, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search Tasks
     * Retrieves Tasks belonging to the authenticated user using the specified search criteria
     * @param contactId Returns tasks for the provided contact id (optional)
     * @param hasDueDate Returns tasks that have an &#39;action date&#39; when set to true (optional)
     * @param userId Returns tasks for the provided user id (optional)
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param completed Sets completed status of items to return (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param order Attribute to order items by (optional)
     * @return InfusionsoftTaskList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTaskList listTasksForCurrentUserUsingGET(Long contactId, Boolean hasDueDate, Long userId, String since, String until, Boolean completed, Integer limit, Integer offset, String order) throws ApiException {
        ApiResponse<InfusionsoftTaskList> resp = listTasksForCurrentUserUsingGETWithHttpInfo(contactId, hasDueDate, userId, since, until, completed, limit, offset, order);
        return resp.getData();
    }

    /**
     * Search Tasks
     * Retrieves Tasks belonging to the authenticated user using the specified search criteria
     * @param contactId Returns tasks for the provided contact id (optional)
     * @param hasDueDate Returns tasks that have an &#39;action date&#39; when set to true (optional)
     * @param userId Returns tasks for the provided user id (optional)
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param completed Sets completed status of items to return (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param order Attribute to order items by (optional)
     * @return ApiResponse&lt;InfusionsoftTaskList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTaskList> listTasksForCurrentUserUsingGETWithHttpInfo(Long contactId, Boolean hasDueDate, Long userId, String since, String until, Boolean completed, Integer limit, Integer offset, String order) throws ApiException {
        com.squareup.okhttp.Call call = listTasksForCurrentUserUsingGETValidateBeforeCall(contactId, hasDueDate, userId, since, until, completed, limit, offset, order, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTaskList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Tasks (asynchronously)
     * Retrieves Tasks belonging to the authenticated user using the specified search criteria
     * @param contactId Returns tasks for the provided contact id (optional)
     * @param hasDueDate Returns tasks that have an &#39;action date&#39; when set to true (optional)
     * @param userId Returns tasks for the provided user id (optional)
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param completed Sets completed status of items to return (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param order Attribute to order items by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTasksForCurrentUserUsingGETAsync(Long contactId, Boolean hasDueDate, Long userId, String since, String until, Boolean completed, Integer limit, Integer offset, String order, final ApiCallback<InfusionsoftTaskList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTasksForCurrentUserUsingGETValidateBeforeCall(contactId, hasDueDate, userId, since, until, completed, limit, offset, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTaskList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTasksUsingGET
     * @param contactId contact_id (optional)
     * @param hasDueDate has_due_date (optional)
     * @param userId user_id (optional)
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param completed Sets completed status of items to return (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param order Attribute to order items by (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTasksUsingGETCall(Long contactId, Boolean hasDueDate, Long userId, String since, String until, Boolean completed, Integer limit, Integer offset, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contactId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contact_id", contactId));
        if (hasDueDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("has_due_date", hasDueDate));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until", until));
        if (completed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("completed", completed));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTasksUsingGETValidateBeforeCall(Long contactId, Boolean hasDueDate, Long userId, String since, String until, Boolean completed, Integer limit, Integer offset, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listTasksUsingGETCall(contactId, hasDueDate, userId, since, until, completed, limit, offset, order, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Tasks
     * Retrieves a list of all tasks using the specified search criteria
     * @param contactId contact_id (optional)
     * @param hasDueDate has_due_date (optional)
     * @param userId user_id (optional)
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param completed Sets completed status of items to return (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param order Attribute to order items by (optional)
     * @return InfusionsoftTaskList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTaskList listTasksUsingGET(Long contactId, Boolean hasDueDate, Long userId, String since, String until, Boolean completed, Integer limit, Integer offset, String order) throws ApiException {
        ApiResponse<InfusionsoftTaskList> resp = listTasksUsingGETWithHttpInfo(contactId, hasDueDate, userId, since, until, completed, limit, offset, order);
        return resp.getData();
    }

    /**
     * List Tasks
     * Retrieves a list of all tasks using the specified search criteria
     * @param contactId contact_id (optional)
     * @param hasDueDate has_due_date (optional)
     * @param userId user_id (optional)
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param completed Sets completed status of items to return (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param order Attribute to order items by (optional)
     * @return ApiResponse&lt;InfusionsoftTaskList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTaskList> listTasksUsingGETWithHttpInfo(Long contactId, Boolean hasDueDate, Long userId, String since, String until, Boolean completed, Integer limit, Integer offset, String order) throws ApiException {
        com.squareup.okhttp.Call call = listTasksUsingGETValidateBeforeCall(contactId, hasDueDate, userId, since, until, completed, limit, offset, order, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTaskList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Tasks (asynchronously)
     * Retrieves a list of all tasks using the specified search criteria
     * @param contactId contact_id (optional)
     * @param hasDueDate has_due_date (optional)
     * @param userId user_id (optional)
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param completed Sets completed status of items to return (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param order Attribute to order items by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTasksUsingGETAsync(Long contactId, Boolean hasDueDate, Long userId, String since, String until, Boolean completed, Integer limit, Integer offset, String order, final ApiCallback<InfusionsoftTaskList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTasksUsingGETValidateBeforeCall(contactId, hasDueDate, userId, since, until, completed, limit, offset, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTaskList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveTaskModelUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveTaskModelUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/model";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveTaskModelUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveTaskModelUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Task Model
     * Get the custom fields for the Task object
     * @return InfusionsoftObjectModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftObjectModel retrieveTaskModelUsingGET() throws ApiException {
        ApiResponse<InfusionsoftObjectModel> resp = retrieveTaskModelUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve Task Model
     * Get the custom fields for the Task object
     * @return ApiResponse&lt;InfusionsoftObjectModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftObjectModel> retrieveTaskModelUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveTaskModelUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftObjectModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Task Model (asynchronously)
     * Get the custom fields for the Task object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveTaskModelUsingGETAsync(final ApiCallback<InfusionsoftObjectModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveTaskModelUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftObjectModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePropertiesOnTaskUsingPATCH
     * @param taskId taskId (required)
     * @param task task (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePropertiesOnTaskUsingPATCHCall(String taskId, InfusionsoftTask task, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = task;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePropertiesOnTaskUsingPATCHValidateBeforeCall(String taskId, InfusionsoftTask task, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updatePropertiesOnTaskUsingPATCH(Async)");
        }
        
        // verify the required parameter 'task' is set
        if (task == null) {
            throw new ApiException("Missing the required parameter 'task' when calling updatePropertiesOnTaskUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePropertiesOnTaskUsingPATCHCall(taskId, task, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Task
     * Updates a task with only the values provided in the request
     * @param taskId taskId (required)
     * @param task task (required)
     * @return InfusionsoftTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTask updatePropertiesOnTaskUsingPATCH(String taskId, InfusionsoftTask task) throws ApiException {
        ApiResponse<InfusionsoftTask> resp = updatePropertiesOnTaskUsingPATCHWithHttpInfo(taskId, task);
        return resp.getData();
    }

    /**
     * Update a Task
     * Updates a task with only the values provided in the request
     * @param taskId taskId (required)
     * @param task task (required)
     * @return ApiResponse&lt;InfusionsoftTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTask> updatePropertiesOnTaskUsingPATCHWithHttpInfo(String taskId, InfusionsoftTask task) throws ApiException {
        com.squareup.okhttp.Call call = updatePropertiesOnTaskUsingPATCHValidateBeforeCall(taskId, task, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Task (asynchronously)
     * Updates a task with only the values provided in the request
     * @param taskId taskId (required)
     * @param task task (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePropertiesOnTaskUsingPATCHAsync(String taskId, InfusionsoftTask task, final ApiCallback<InfusionsoftTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePropertiesOnTaskUsingPATCHValidateBeforeCall(taskId, task, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTaskUsingPUT
     * @param taskId taskId (required)
     * @param task task (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaskUsingPUTCall(String taskId, InfusionsoftTask task, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = task;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaskUsingPUTValidateBeforeCall(String taskId, InfusionsoftTask task, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTaskUsingPUT(Async)");
        }
        
        // verify the required parameter 'task' is set
        if (task == null) {
            throw new ApiException("Missing the required parameter 'task' when calling updateTaskUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaskUsingPUTCall(taskId, task, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace a Task
     * Replaces a task with the values provided in the request
     * @param taskId taskId (required)
     * @param task task (required)
     * @return InfusionsoftTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTask updateTaskUsingPUT(String taskId, InfusionsoftTask task) throws ApiException {
        ApiResponse<InfusionsoftTask> resp = updateTaskUsingPUTWithHttpInfo(taskId, task);
        return resp.getData();
    }

    /**
     * Replace a Task
     * Replaces a task with the values provided in the request
     * @param taskId taskId (required)
     * @param task task (required)
     * @return ApiResponse&lt;InfusionsoftTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTask> updateTaskUsingPUTWithHttpInfo(String taskId, InfusionsoftTask task) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskUsingPUTValidateBeforeCall(taskId, task, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace a Task (asynchronously)
     * Replaces a task with the values provided in the request
     * @param taskId taskId (required)
     * @param task task (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskUsingPUTAsync(String taskId, InfusionsoftTask task, final ApiCallback<InfusionsoftTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskUsingPUTValidateBeforeCall(taskId, task, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
