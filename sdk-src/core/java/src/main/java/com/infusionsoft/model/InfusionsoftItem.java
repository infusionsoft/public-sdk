/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InfusionsoftItem
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-10-16T20:44:31.010Z")
public class InfusionsoftItem {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("next_item_id")
  private Long nextItemId = null;

  @SerializedName("previous_item_id")
  private Long previousItemId = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NULL("NULL"),
    
    START("Start"),
    
    WAIT("Wait"),
    
    DELAYTIMER("DelayTimer"),
    
    CONTACTTIMER("ContactTimer"),
    
    DATETIMER("DateTimer"),
    
    EMAIL("Email"),
    
    BARDEMAIL("BardEmail"),
    
    EMAILCONFIRM("EmailConfirm"),
    
    VOICE("Voice"),
    
    FAX("Fax"),
    
    LETTER("Letter"),
    
    TAG("Tag"),
    
    OPPORTUNITY("Opportunity"),
    
    NOTE("Note"),
    
    TASK("Task"),
    
    COMPLETETASKS("CompleteTasks"),
    
    APPOINTMENT("Appointment"),
    
    ASSIGNOWNER("AssignOwner"),
    
    FIELDVALUE("FieldValue"),
    
    FULFILLMENT("Fulfillment"),
    
    CREATEORDER("CreateOrder"),
    
    HTTP("Http"),
    
    CUSTOMERHUB("CustomerHub"),
    
    ACTIONSET("ActionSet");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  public InfusionsoftItem id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public InfusionsoftItem name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public InfusionsoftItem nextItemId(Long nextItemId) {
    this.nextItemId = nextItemId;
    return this;
  }

   /**
   * Get nextItemId
   * @return nextItemId
  **/
  @ApiModelProperty(value = "")
  public Long getNextItemId() {
    return nextItemId;
  }

  public void setNextItemId(Long nextItemId) {
    this.nextItemId = nextItemId;
  }

  public InfusionsoftItem previousItemId(Long previousItemId) {
    this.previousItemId = previousItemId;
    return this;
  }

   /**
   * Get previousItemId
   * @return previousItemId
  **/
  @ApiModelProperty(value = "")
  public Long getPreviousItemId() {
    return previousItemId;
  }

  public void setPreviousItemId(Long previousItemId) {
    this.previousItemId = previousItemId;
  }

  public InfusionsoftItem type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfusionsoftItem item = (InfusionsoftItem) o;
    return Objects.equals(this.id, item.id) &&
        Objects.equals(this.name, item.name) &&
        Objects.equals(this.nextItemId, item.nextItemId) &&
        Objects.equals(this.previousItemId, item.previousItemId) &&
        Objects.equals(this.type, item.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, nextItemId, previousItemId, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfusionsoftItem {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextItemId: ").append(toIndentedString(nextItemId)).append("\n");
    sb.append("    previousItemId: ").append(toIndentedString(previousItemId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

