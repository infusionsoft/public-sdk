/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.89421
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiCallback;
import com.infusionsoft.ApiClient;
import com.infusionsoft.ApiException;
import com.infusionsoft.ApiResponse;
import com.infusionsoft.Configuration;
import com.infusionsoft.Pair;
import com.infusionsoft.ProgressRequestBody;
import com.infusionsoft.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infusionsoft.model.InfusionsoftAppointment;
import com.infusionsoft.model.InfusionsoftAppointmentList;
import com.infusionsoft.model.InfusionsoftCreateRestCustomField;
import com.infusionsoft.model.InfusionsoftCustomFieldMetaData;
import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftObjectModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppointmentApi {
    private ApiClient apiClient;

    public AppointmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppointmentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAppointmentCustomFieldUsingPOST
     * @param customField customField (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAppointmentCustomFieldUsingPOSTCall(InfusionsoftCreateRestCustomField customField, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customField;

        // create path and map variables
        String localVarPath = "/appointments/model/customFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAppointmentCustomFieldUsingPOSTValidateBeforeCall(InfusionsoftCreateRestCustomField customField, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customField' is set
        if (customField == null) {
            throw new ApiException("Missing the required parameter 'customField' when calling createAppointmentCustomFieldUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createAppointmentCustomFieldUsingPOSTCall(customField, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Custom Field
     * Adds a custom field of the specified type and options to the Appointment object.
     * @param customField customField (required)
     * @return InfusionsoftCustomFieldMetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftCustomFieldMetaData createAppointmentCustomFieldUsingPOST(InfusionsoftCreateRestCustomField customField) throws ApiException {
        ApiResponse<InfusionsoftCustomFieldMetaData> resp = createAppointmentCustomFieldUsingPOSTWithHttpInfo(customField);
        return resp.getData();
    }

    /**
     * Create a Custom Field
     * Adds a custom field of the specified type and options to the Appointment object.
     * @param customField customField (required)
     * @return ApiResponse&lt;InfusionsoftCustomFieldMetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftCustomFieldMetaData> createAppointmentCustomFieldUsingPOSTWithHttpInfo(InfusionsoftCreateRestCustomField customField) throws ApiException {
        com.squareup.okhttp.Call call = createAppointmentCustomFieldUsingPOSTValidateBeforeCall(customField, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftCustomFieldMetaData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Custom Field (asynchronously)
     * Adds a custom field of the specified type and options to the Appointment object.
     * @param customField customField (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAppointmentCustomFieldUsingPOSTAsync(InfusionsoftCreateRestCustomField customField, final ApiCallback<InfusionsoftCustomFieldMetaData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAppointmentCustomFieldUsingPOSTValidateBeforeCall(customField, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftCustomFieldMetaData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAppointmentUsingPOST
     * @param appointment appointment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAppointmentUsingPOSTCall(InfusionsoftAppointment appointment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = appointment;

        // create path and map variables
        String localVarPath = "/appointments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAppointmentUsingPOSTValidateBeforeCall(InfusionsoftAppointment appointment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appointment' is set
        if (appointment == null) {
            throw new ApiException("Missing the required parameter 'appointment' when calling createAppointmentUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createAppointmentUsingPOSTCall(appointment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an Appointment
     * Creates a new appointment as the authenticated user
     * @param appointment appointment (required)
     * @return InfusionsoftAppointment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftAppointment createAppointmentUsingPOST(InfusionsoftAppointment appointment) throws ApiException {
        ApiResponse<InfusionsoftAppointment> resp = createAppointmentUsingPOSTWithHttpInfo(appointment);
        return resp.getData();
    }

    /**
     * Create an Appointment
     * Creates a new appointment as the authenticated user
     * @param appointment appointment (required)
     * @return ApiResponse&lt;InfusionsoftAppointment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftAppointment> createAppointmentUsingPOSTWithHttpInfo(InfusionsoftAppointment appointment) throws ApiException {
        com.squareup.okhttp.Call call = createAppointmentUsingPOSTValidateBeforeCall(appointment, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftAppointment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an Appointment (asynchronously)
     * Creates a new appointment as the authenticated user
     * @param appointment appointment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAppointmentUsingPOSTAsync(InfusionsoftAppointment appointment, final ApiCallback<InfusionsoftAppointment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAppointmentUsingPOSTValidateBeforeCall(appointment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftAppointment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAppointmentUsingDELETE
     * @param appointmentId appointmentId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAppointmentUsingDELETECall(Long appointmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointments/{appointmentId}"
            .replaceAll("\\{" + "appointmentId" + "\\}", apiClient.escapeString(appointmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAppointmentUsingDELETEValidateBeforeCall(Long appointmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appointmentId' is set
        if (appointmentId == null) {
            throw new ApiException("Missing the required parameter 'appointmentId' when calling deleteAppointmentUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAppointmentUsingDELETECall(appointmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an Appointment
     * Deletes the specified appointment
     * @param appointmentId appointmentId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAppointmentUsingDELETE(Long appointmentId) throws ApiException {
        deleteAppointmentUsingDELETEWithHttpInfo(appointmentId);
    }

    /**
     * Delete an Appointment
     * Deletes the specified appointment
     * @param appointmentId appointmentId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAppointmentUsingDELETEWithHttpInfo(Long appointmentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAppointmentUsingDELETEValidateBeforeCall(appointmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an Appointment (asynchronously)
     * Deletes the specified appointment
     * @param appointmentId appointmentId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAppointmentUsingDELETEAsync(Long appointmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAppointmentUsingDELETEValidateBeforeCall(appointmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAppointmentUsingGET
     * @param appointmentId appointmentId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAppointmentUsingGETCall(Long appointmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointments/{appointmentId}"
            .replaceAll("\\{" + "appointmentId" + "\\}", apiClient.escapeString(appointmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAppointmentUsingGETValidateBeforeCall(Long appointmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appointmentId' is set
        if (appointmentId == null) {
            throw new ApiException("Missing the required parameter 'appointmentId' when calling getAppointmentUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getAppointmentUsingGETCall(appointmentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an Appointment
     * Retrieves a specific appointment with respect to user permissions. The authenticated user will need the \&quot;can view all records\&quot; permission for Task/Appt/Notes
     * @param appointmentId appointmentId (required)
     * @return InfusionsoftAppointment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftAppointment getAppointmentUsingGET(Long appointmentId) throws ApiException {
        ApiResponse<InfusionsoftAppointment> resp = getAppointmentUsingGETWithHttpInfo(appointmentId);
        return resp.getData();
    }

    /**
     * Retrieve an Appointment
     * Retrieves a specific appointment with respect to user permissions. The authenticated user will need the \&quot;can view all records\&quot; permission for Task/Appt/Notes
     * @param appointmentId appointmentId (required)
     * @return ApiResponse&lt;InfusionsoftAppointment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftAppointment> getAppointmentUsingGETWithHttpInfo(Long appointmentId) throws ApiException {
        com.squareup.okhttp.Call call = getAppointmentUsingGETValidateBeforeCall(appointmentId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftAppointment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an Appointment (asynchronously)
     * Retrieves a specific appointment with respect to user permissions. The authenticated user will need the \&quot;can view all records\&quot; permission for Task/Appt/Notes
     * @param appointmentId appointmentId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAppointmentUsingGETAsync(Long appointmentId, final ApiCallback<InfusionsoftAppointment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAppointmentUsingGETValidateBeforeCall(appointmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftAppointment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAppointmentsUsingGET
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Optionally find appointments with a contact (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAppointmentsUsingGETCall(String since, String until, Integer limit, Integer offset, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until", until));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (contactId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contact_id", contactId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAppointmentsUsingGETValidateBeforeCall(String since, String until, Integer limit, Integer offset, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listAppointmentsUsingGETCall(since, until, limit, offset, contactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Appointments
     * Retrieves all appointments for the authenticated user
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Optionally find appointments with a contact (optional)
     * @return InfusionsoftAppointmentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftAppointmentList listAppointmentsUsingGET(String since, String until, Integer limit, Integer offset, Long contactId) throws ApiException {
        ApiResponse<InfusionsoftAppointmentList> resp = listAppointmentsUsingGETWithHttpInfo(since, until, limit, offset, contactId);
        return resp.getData();
    }

    /**
     * List Appointments
     * Retrieves all appointments for the authenticated user
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Optionally find appointments with a contact (optional)
     * @return ApiResponse&lt;InfusionsoftAppointmentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftAppointmentList> listAppointmentsUsingGETWithHttpInfo(String since, String until, Integer limit, Integer offset, Long contactId) throws ApiException {
        com.squareup.okhttp.Call call = listAppointmentsUsingGETValidateBeforeCall(since, until, limit, offset, contactId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftAppointmentList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Appointments (asynchronously)
     * Retrieves all appointments for the authenticated user
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Optionally find appointments with a contact (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAppointmentsUsingGETAsync(String since, String until, Integer limit, Integer offset, Long contactId, final ApiCallback<InfusionsoftAppointmentList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAppointmentsUsingGETValidateBeforeCall(since, until, limit, offset, contactId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftAppointmentList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveAppointmentModelUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveAppointmentModelUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appointments/model";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveAppointmentModelUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retrieveAppointmentModelUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Appointment Model
     * Get the custom fields for the Appointment object
     * @return InfusionsoftObjectModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftObjectModel retrieveAppointmentModelUsingGET() throws ApiException {
        ApiResponse<InfusionsoftObjectModel> resp = retrieveAppointmentModelUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve Appointment Model
     * Get the custom fields for the Appointment object
     * @return ApiResponse&lt;InfusionsoftObjectModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftObjectModel> retrieveAppointmentModelUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retrieveAppointmentModelUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftObjectModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Appointment Model (asynchronously)
     * Get the custom fields for the Appointment object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveAppointmentModelUsingGETAsync(final ApiCallback<InfusionsoftObjectModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveAppointmentModelUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftObjectModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAppointmentUsingPUT
     * @param appointmentId appointmentId (required)
     * @param appointmentDTO appointmentDTO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAppointmentUsingPUTCall(Long appointmentId, InfusionsoftAppointment appointmentDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = appointmentDTO;

        // create path and map variables
        String localVarPath = "/appointments/{appointmentId}"
            .replaceAll("\\{" + "appointmentId" + "\\}", apiClient.escapeString(appointmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAppointmentUsingPUTValidateBeforeCall(Long appointmentId, InfusionsoftAppointment appointmentDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appointmentId' is set
        if (appointmentId == null) {
            throw new ApiException("Missing the required parameter 'appointmentId' when calling updateAppointmentUsingPUT(Async)");
        }
        
        // verify the required parameter 'appointmentDTO' is set
        if (appointmentDTO == null) {
            throw new ApiException("Missing the required parameter 'appointmentDTO' when calling updateAppointmentUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAppointmentUsingPUTCall(appointmentId, appointmentDTO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace an Appointment
     * Replaces all values of a given appointment
     * @param appointmentId appointmentId (required)
     * @param appointmentDTO appointmentDTO (required)
     * @return InfusionsoftAppointment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftAppointment updateAppointmentUsingPUT(Long appointmentId, InfusionsoftAppointment appointmentDTO) throws ApiException {
        ApiResponse<InfusionsoftAppointment> resp = updateAppointmentUsingPUTWithHttpInfo(appointmentId, appointmentDTO);
        return resp.getData();
    }

    /**
     * Replace an Appointment
     * Replaces all values of a given appointment
     * @param appointmentId appointmentId (required)
     * @param appointmentDTO appointmentDTO (required)
     * @return ApiResponse&lt;InfusionsoftAppointment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftAppointment> updateAppointmentUsingPUTWithHttpInfo(Long appointmentId, InfusionsoftAppointment appointmentDTO) throws ApiException {
        com.squareup.okhttp.Call call = updateAppointmentUsingPUTValidateBeforeCall(appointmentId, appointmentDTO, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftAppointment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace an Appointment (asynchronously)
     * Replaces all values of a given appointment
     * @param appointmentId appointmentId (required)
     * @param appointmentDTO appointmentDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAppointmentUsingPUTAsync(Long appointmentId, InfusionsoftAppointment appointmentDTO, final ApiCallback<InfusionsoftAppointment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAppointmentUsingPUTValidateBeforeCall(appointmentId, appointmentDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftAppointment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePropertiesOnAppointmentUsingPATCH
     * @param appointmentId appointmentId (required)
     * @param appointmentDTO appointmentDTO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePropertiesOnAppointmentUsingPATCHCall(Long appointmentId, InfusionsoftAppointment appointmentDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = appointmentDTO;

        // create path and map variables
        String localVarPath = "/appointments/{appointmentId}"
            .replaceAll("\\{" + "appointmentId" + "\\}", apiClient.escapeString(appointmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePropertiesOnAppointmentUsingPATCHValidateBeforeCall(Long appointmentId, InfusionsoftAppointment appointmentDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appointmentId' is set
        if (appointmentId == null) {
            throw new ApiException("Missing the required parameter 'appointmentId' when calling updatePropertiesOnAppointmentUsingPATCH(Async)");
        }
        
        // verify the required parameter 'appointmentDTO' is set
        if (appointmentDTO == null) {
            throw new ApiException("Missing the required parameter 'appointmentDTO' when calling updatePropertiesOnAppointmentUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePropertiesOnAppointmentUsingPATCHCall(appointmentId, appointmentDTO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an Appointment
     * Updates the provided values of a given appointment
     * @param appointmentId appointmentId (required)
     * @param appointmentDTO appointmentDTO (required)
     * @return InfusionsoftAppointment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftAppointment updatePropertiesOnAppointmentUsingPATCH(Long appointmentId, InfusionsoftAppointment appointmentDTO) throws ApiException {
        ApiResponse<InfusionsoftAppointment> resp = updatePropertiesOnAppointmentUsingPATCHWithHttpInfo(appointmentId, appointmentDTO);
        return resp.getData();
    }

    /**
     * Update an Appointment
     * Updates the provided values of a given appointment
     * @param appointmentId appointmentId (required)
     * @param appointmentDTO appointmentDTO (required)
     * @return ApiResponse&lt;InfusionsoftAppointment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftAppointment> updatePropertiesOnAppointmentUsingPATCHWithHttpInfo(Long appointmentId, InfusionsoftAppointment appointmentDTO) throws ApiException {
        com.squareup.okhttp.Call call = updatePropertiesOnAppointmentUsingPATCHValidateBeforeCall(appointmentId, appointmentDTO, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftAppointment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Appointment (asynchronously)
     * Updates the provided values of a given appointment
     * @param appointmentId appointmentId (required)
     * @param appointmentDTO appointmentDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePropertiesOnAppointmentUsingPATCHAsync(Long appointmentId, InfusionsoftAppointment appointmentDTO, final ApiCallback<InfusionsoftAppointment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePropertiesOnAppointmentUsingPATCHValidateBeforeCall(appointmentId, appointmentDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftAppointment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
