/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.89421
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiCallback;
import com.infusionsoft.ApiClient;
import com.infusionsoft.ApiException;
import com.infusionsoft.ApiResponse;
import com.infusionsoft.Configuration;
import com.infusionsoft.Pair;
import com.infusionsoft.ProgressRequestBody;
import com.infusionsoft.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infusionsoft.model.InfusionsoftCreateProduct;
import com.infusionsoft.model.InfusionsoftCreateProductImage;
import com.infusionsoft.model.InfusionsoftCreateProductSubscription;
import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftProduct;
import com.infusionsoft.model.InfusionsoftProductList;
import com.infusionsoft.model.InfusionsoftProductStatusList;
import com.infusionsoft.model.InfusionsoftProductSubscription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductApi {
    private ApiClient apiClient;

    public ProductApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createProductImageUsingPOST
     * @param productId productId (required)
     * @param restProductImage restProductImage (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProductImageUsingPOSTCall(Long productId, InfusionsoftCreateProductImage restProductImage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = restProductImage;

        // create path and map variables
        String localVarPath = "/products/{productId}/image"
            .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProductImageUsingPOSTValidateBeforeCall(Long productId, InfusionsoftCreateProductImage restProductImage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling createProductImageUsingPOST(Async)");
        }
        
        // verify the required parameter 'restProductImage' is set
        if (restProductImage == null) {
            throw new ApiException("Missing the required parameter 'restProductImage' when calling createProductImageUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createProductImageUsingPOSTCall(productId, restProductImage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload a product image
     * Max payload 3 megabytes, the &#x60;file_data&#x60; is base64 encoded.
     * @param productId productId (required)
     * @param restProductImage restProductImage (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createProductImageUsingPOST(Long productId, InfusionsoftCreateProductImage restProductImage) throws ApiException {
        createProductImageUsingPOSTWithHttpInfo(productId, restProductImage);
    }

    /**
     * Upload a product image
     * Max payload 3 megabytes, the &#x60;file_data&#x60; is base64 encoded.
     * @param productId productId (required)
     * @param restProductImage restProductImage (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createProductImageUsingPOSTWithHttpInfo(Long productId, InfusionsoftCreateProductImage restProductImage) throws ApiException {
        com.squareup.okhttp.Call call = createProductImageUsingPOSTValidateBeforeCall(productId, restProductImage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upload a product image (asynchronously)
     * Max payload 3 megabytes, the &#x60;file_data&#x60; is base64 encoded.
     * @param productId productId (required)
     * @param restProductImage restProductImage (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProductImageUsingPOSTAsync(Long productId, InfusionsoftCreateProductImage restProductImage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProductImageUsingPOSTValidateBeforeCall(productId, restProductImage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createProductSubscriptionUsingPOST
     * @param productId productId (required)
     * @param createProductSubscription createProductSubscription (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProductSubscriptionUsingPOSTCall(Long productId, InfusionsoftCreateProductSubscription createProductSubscription, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createProductSubscription;

        // create path and map variables
        String localVarPath = "/products/{productId}/subscriptions"
            .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProductSubscriptionUsingPOSTValidateBeforeCall(Long productId, InfusionsoftCreateProductSubscription createProductSubscription, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling createProductSubscriptionUsingPOST(Async)");
        }
        
        // verify the required parameter 'createProductSubscription' is set
        if (createProductSubscription == null) {
            throw new ApiException("Missing the required parameter 'createProductSubscription' when calling createProductSubscriptionUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createProductSubscriptionUsingPOSTCall(productId, createProductSubscription, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Product Subscription
     * Creates a new product subscription
     * @param productId productId (required)
     * @param createProductSubscription createProductSubscription (required)
     * @return InfusionsoftProductSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftProductSubscription createProductSubscriptionUsingPOST(Long productId, InfusionsoftCreateProductSubscription createProductSubscription) throws ApiException {
        ApiResponse<InfusionsoftProductSubscription> resp = createProductSubscriptionUsingPOSTWithHttpInfo(productId, createProductSubscription);
        return resp.getData();
    }

    /**
     * Create a Product Subscription
     * Creates a new product subscription
     * @param productId productId (required)
     * @param createProductSubscription createProductSubscription (required)
     * @return ApiResponse&lt;InfusionsoftProductSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftProductSubscription> createProductSubscriptionUsingPOSTWithHttpInfo(Long productId, InfusionsoftCreateProductSubscription createProductSubscription) throws ApiException {
        com.squareup.okhttp.Call call = createProductSubscriptionUsingPOSTValidateBeforeCall(productId, createProductSubscription, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftProductSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Product Subscription (asynchronously)
     * Creates a new product subscription
     * @param productId productId (required)
     * @param createProductSubscription createProductSubscription (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProductSubscriptionUsingPOSTAsync(Long productId, InfusionsoftCreateProductSubscription createProductSubscription, final ApiCallback<InfusionsoftProductSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProductSubscriptionUsingPOSTValidateBeforeCall(productId, createProductSubscription, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftProductSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createProductUsingPOST
     * @param createProduct createProduct (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProductUsingPOSTCall(InfusionsoftCreateProduct createProduct, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createProduct;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProductUsingPOSTValidateBeforeCall(InfusionsoftCreateProduct createProduct, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createProduct' is set
        if (createProduct == null) {
            throw new ApiException("Missing the required parameter 'createProduct' when calling createProductUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createProductUsingPOSTCall(createProduct, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Product
     * Creates a new product
     * @param createProduct createProduct (required)
     * @return InfusionsoftProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftProduct createProductUsingPOST(InfusionsoftCreateProduct createProduct) throws ApiException {
        ApiResponse<InfusionsoftProduct> resp = createProductUsingPOSTWithHttpInfo(createProduct);
        return resp.getData();
    }

    /**
     * Create a Product
     * Creates a new product
     * @param createProduct createProduct (required)
     * @return ApiResponse&lt;InfusionsoftProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftProduct> createProductUsingPOSTWithHttpInfo(InfusionsoftCreateProduct createProduct) throws ApiException {
        com.squareup.okhttp.Call call = createProductUsingPOSTValidateBeforeCall(createProduct, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftProduct>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Product (asynchronously)
     * Creates a new product
     * @param createProduct createProduct (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProductUsingPOSTAsync(InfusionsoftCreateProduct createProduct, final ApiCallback<InfusionsoftProduct> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProductUsingPOSTValidateBeforeCall(createProduct, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftProduct>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteProductImageUsingDELETE
     * @param productId productId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProductImageUsingDELETECall(Long productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/image"
            .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProductImageUsingDELETEValidateBeforeCall(Long productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling deleteProductImageUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProductImageUsingDELETECall(productId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a product image
     * 
     * @param productId productId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProductImageUsingDELETE(Long productId) throws ApiException {
        deleteProductImageUsingDELETEWithHttpInfo(productId);
    }

    /**
     * Delete a product image
     * 
     * @param productId productId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProductImageUsingDELETEWithHttpInfo(Long productId) throws ApiException {
        com.squareup.okhttp.Call call = deleteProductImageUsingDELETEValidateBeforeCall(productId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a product image (asynchronously)
     * 
     * @param productId productId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProductImageUsingDELETEAsync(Long productId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProductImageUsingDELETEValidateBeforeCall(productId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteProductSubscriptionUsingDELETE
     * @param productId productId (required)
     * @param subscriptionId subscriptionId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProductSubscriptionUsingDELETECall(Long productId, Long subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProductSubscriptionUsingDELETEValidateBeforeCall(Long productId, Long subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling deleteProductSubscriptionUsingDELETE(Async)");
        }
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deleteProductSubscriptionUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProductSubscriptionUsingDELETECall(productId, subscriptionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Product Subscription
     * Deletes a product subscription
     * @param productId productId (required)
     * @param subscriptionId subscriptionId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProductSubscriptionUsingDELETE(Long productId, Long subscriptionId) throws ApiException {
        deleteProductSubscriptionUsingDELETEWithHttpInfo(productId, subscriptionId);
    }

    /**
     * Delete a Product Subscription
     * Deletes a product subscription
     * @param productId productId (required)
     * @param subscriptionId subscriptionId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProductSubscriptionUsingDELETEWithHttpInfo(Long productId, Long subscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteProductSubscriptionUsingDELETEValidateBeforeCall(productId, subscriptionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Product Subscription (asynchronously)
     * Deletes a product subscription
     * @param productId productId (required)
     * @param subscriptionId subscriptionId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProductSubscriptionUsingDELETEAsync(Long productId, Long subscriptionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProductSubscriptionUsingDELETEValidateBeforeCall(productId, subscriptionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteProductUsingDELETE
     * @param productId productId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProductUsingDELETECall(Long productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProductUsingDELETEValidateBeforeCall(Long productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling deleteProductUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProductUsingDELETECall(productId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Product
     * Deletes a product and its subscriptions
     * @param productId productId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProductUsingDELETE(Long productId) throws ApiException {
        deleteProductUsingDELETEWithHttpInfo(productId);
    }

    /**
     * Delete a Product
     * Deletes a product and its subscriptions
     * @param productId productId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProductUsingDELETEWithHttpInfo(Long productId) throws ApiException {
        com.squareup.okhttp.Call call = deleteProductUsingDELETEValidateBeforeCall(productId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Product (asynchronously)
     * Deletes a product and its subscriptions
     * @param productId productId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProductUsingDELETEAsync(Long productId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProductUsingDELETEValidateBeforeCall(productId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listProductsFromSyncTokenUsingGET
     * @param syncToken sync_token (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call listProductsFromSyncTokenUsingGETCall(String syncToken, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (syncToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sync_token", syncToken));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listProductsFromSyncTokenUsingGETValidateBeforeCall(String syncToken, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listProductsFromSyncTokenUsingGETCall(syncToken, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Synced Products
     * The Sync endpoint returns a set of products that have been updated or created since the last result set was retrieved, minus any products that have been deleted.
     * @param syncToken sync_token (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @return InfusionsoftProductStatusList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public InfusionsoftProductStatusList listProductsFromSyncTokenUsingGET(String syncToken, Integer limit, Integer offset) throws ApiException {
        ApiResponse<InfusionsoftProductStatusList> resp = listProductsFromSyncTokenUsingGETWithHttpInfo(syncToken, limit, offset);
        return resp.getData();
    }

    /**
     * Retrieve Synced Products
     * The Sync endpoint returns a set of products that have been updated or created since the last result set was retrieved, minus any products that have been deleted.
     * @param syncToken sync_token (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @return ApiResponse&lt;InfusionsoftProductStatusList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<InfusionsoftProductStatusList> listProductsFromSyncTokenUsingGETWithHttpInfo(String syncToken, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = listProductsFromSyncTokenUsingGETValidateBeforeCall(syncToken, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftProductStatusList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Synced Products (asynchronously)
     * The Sync endpoint returns a set of products that have been updated or created since the last result set was retrieved, minus any products that have been deleted.
     * @param syncToken sync_token (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call listProductsFromSyncTokenUsingGETAsync(String syncToken, Integer limit, Integer offset, final ApiCallback<InfusionsoftProductStatusList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listProductsFromSyncTokenUsingGETValidateBeforeCall(syncToken, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftProductStatusList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listProductsUsingGET
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param active Sets status of items to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listProductsUsingGETCall(Integer limit, Integer offset, Boolean active, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (active != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active", active));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listProductsUsingGETValidateBeforeCall(Integer limit, Integer offset, Boolean active, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listProductsUsingGETCall(limit, offset, active, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Products
     * Retrieves a list of all products
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param active Sets status of items to return (optional)
     * @return InfusionsoftProductList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftProductList listProductsUsingGET(Integer limit, Integer offset, Boolean active) throws ApiException {
        ApiResponse<InfusionsoftProductList> resp = listProductsUsingGETWithHttpInfo(limit, offset, active);
        return resp.getData();
    }

    /**
     * List Products
     * Retrieves a list of all products
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param active Sets status of items to return (optional)
     * @return ApiResponse&lt;InfusionsoftProductList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftProductList> listProductsUsingGETWithHttpInfo(Integer limit, Integer offset, Boolean active) throws ApiException {
        com.squareup.okhttp.Call call = listProductsUsingGETValidateBeforeCall(limit, offset, active, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftProductList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Products (asynchronously)
     * Retrieves a list of all products
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param active Sets status of items to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listProductsUsingGETAsync(Integer limit, Integer offset, Boolean active, final ApiCallback<InfusionsoftProductList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listProductsUsingGETValidateBeforeCall(limit, offset, active, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftProductList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveProductSubscriptionUsingGET
     * @param productId productId (required)
     * @param subscriptionId subscriptionId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveProductSubscriptionUsingGETCall(Long productId, Long subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveProductSubscriptionUsingGETValidateBeforeCall(Long productId, Long subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling retrieveProductSubscriptionUsingGET(Async)");
        }
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling retrieveProductSubscriptionUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveProductSubscriptionUsingGETCall(productId, subscriptionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Product Subscription
     * 
     * @param productId productId (required)
     * @param subscriptionId subscriptionId (required)
     * @return InfusionsoftProductSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftProductSubscription retrieveProductSubscriptionUsingGET(Long productId, Long subscriptionId) throws ApiException {
        ApiResponse<InfusionsoftProductSubscription> resp = retrieveProductSubscriptionUsingGETWithHttpInfo(productId, subscriptionId);
        return resp.getData();
    }

    /**
     * Retrieve a Product Subscription
     * 
     * @param productId productId (required)
     * @param subscriptionId subscriptionId (required)
     * @return ApiResponse&lt;InfusionsoftProductSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftProductSubscription> retrieveProductSubscriptionUsingGETWithHttpInfo(Long productId, Long subscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveProductSubscriptionUsingGETValidateBeforeCall(productId, subscriptionId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftProductSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Product Subscription (asynchronously)
     * 
     * @param productId productId (required)
     * @param subscriptionId subscriptionId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveProductSubscriptionUsingGETAsync(Long productId, Long subscriptionId, final ApiCallback<InfusionsoftProductSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveProductSubscriptionUsingGETValidateBeforeCall(productId, subscriptionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftProductSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveProductUsingGET
     * @param productId productId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveProductUsingGETCall(Long productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveProductUsingGETValidateBeforeCall(Long productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling retrieveProductUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveProductUsingGETCall(productId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Product
     * 
     * @param productId productId (required)
     * @return InfusionsoftProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftProduct retrieveProductUsingGET(Long productId) throws ApiException {
        ApiResponse<InfusionsoftProduct> resp = retrieveProductUsingGETWithHttpInfo(productId);
        return resp.getData();
    }

    /**
     * Retrieve a Product
     * 
     * @param productId productId (required)
     * @return ApiResponse&lt;InfusionsoftProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftProduct> retrieveProductUsingGETWithHttpInfo(Long productId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveProductUsingGETValidateBeforeCall(productId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftProduct>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Product (asynchronously)
     * 
     * @param productId productId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveProductUsingGETAsync(Long productId, final ApiCallback<InfusionsoftProduct> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveProductUsingGETValidateBeforeCall(productId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftProduct>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
