/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.89421
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiException;
import com.infusionsoft.model.InfusionsoftCreateProduct;
import com.infusionsoft.model.InfusionsoftCreateProductImage;
import com.infusionsoft.model.InfusionsoftCreateProductSubscription;
import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftProduct;
import com.infusionsoft.model.InfusionsoftProductList;
import com.infusionsoft.model.InfusionsoftProductStatusList;
import com.infusionsoft.model.InfusionsoftProductSubscription;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductApi
 */
@Ignore
public class ProductApiTest {

    private final ProductApi api = new ProductApi();

    
    /**
     * Upload a product image
     *
     * Max payload 3 megabytes, the &#x60;file_data&#x60; is base64 encoded.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProductImageUsingPOSTTest() throws ApiException {
        Long productId = null;
        InfusionsoftCreateProductImage restProductImage = null;
        api.createProductImageUsingPOST(productId, restProductImage);

        // TODO: test validations
    }
    
    /**
     * Create a Product Subscription
     *
     * Creates a new product subscription
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProductSubscriptionUsingPOSTTest() throws ApiException {
        Long productId = null;
        InfusionsoftCreateProductSubscription createProductSubscription = null;
        InfusionsoftProductSubscription response = api.createProductSubscriptionUsingPOST(productId, createProductSubscription);

        // TODO: test validations
    }
    
    /**
     * Create a Product
     *
     * Creates a new product
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProductUsingPOSTTest() throws ApiException {
        InfusionsoftCreateProduct createProduct = null;
        InfusionsoftProduct response = api.createProductUsingPOST(createProduct);

        // TODO: test validations
    }
    
    /**
     * Delete a product image
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProductImageUsingDELETETest() throws ApiException {
        Long productId = null;
        api.deleteProductImageUsingDELETE(productId);

        // TODO: test validations
    }
    
    /**
     * Delete a Product Subscription
     *
     * Deletes a product subscription
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProductSubscriptionUsingDELETETest() throws ApiException {
        Long productId = null;
        Long subscriptionId = null;
        api.deleteProductSubscriptionUsingDELETE(productId, subscriptionId);

        // TODO: test validations
    }
    
    /**
     * Delete a Product
     *
     * Deletes a product and its subscriptions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProductUsingDELETETest() throws ApiException {
        Long productId = null;
        api.deleteProductUsingDELETE(productId);

        // TODO: test validations
    }
    
    /**
     * Retrieve Synced Products
     *
     * The Sync endpoint returns a set of products that have been updated or created since the last result set was retrieved, minus any products that have been deleted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProductsFromSyncTokenUsingGETTest() throws ApiException {
        String syncToken = null;
        Integer limit = null;
        Integer offset = null;
        InfusionsoftProductStatusList response = api.listProductsFromSyncTokenUsingGET(syncToken, limit, offset);

        // TODO: test validations
    }
    
    /**
     * List Products
     *
     * Retrieves a list of all products
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProductsUsingGETTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        Boolean active = null;
        InfusionsoftProductList response = api.listProductsUsingGET(limit, offset, active);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Product Subscription
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProductSubscriptionUsingGETTest() throws ApiException {
        Long productId = null;
        Long subscriptionId = null;
        InfusionsoftProductSubscription response = api.retrieveProductSubscriptionUsingGET(productId, subscriptionId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProductUsingGETTest() throws ApiException {
        Long productId = null;
        InfusionsoftProduct response = api.retrieveProductUsingGET(productId);

        // TODO: test validations
    }
    
}
