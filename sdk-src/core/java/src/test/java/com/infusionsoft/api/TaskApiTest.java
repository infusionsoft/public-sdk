/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.89421
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiException;
import com.infusionsoft.model.InfusionsoftCreateRestCustomField;
import com.infusionsoft.model.InfusionsoftCustomFieldMetaData;
import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftObjectModel;
import com.infusionsoft.model.InfusionsoftTask;
import com.infusionsoft.model.InfusionsoftTaskList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskApi
 */
@Ignore
public class TaskApiTest {

    private final TaskApi api = new TaskApi();

    
    /**
     * Create a Custom Field
     *
     * Adds a custom field of the specified type and options to the Task object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTaskCustomFieldUsingPOSTTest() throws ApiException {
        InfusionsoftCreateRestCustomField customField = null;
        InfusionsoftCustomFieldMetaData response = api.createTaskCustomFieldUsingPOST(customField);

        // TODO: test validations
    }
    
    /**
     * Create a Task
     *
     * Creates a new task as the authenticated user. NB: Contact must contain at least one item in the fields &#x60;title&#x60; and &#x60;due_date&#x60;. All other attributes are optional
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTaskUsingPOSTTest() throws ApiException {
        InfusionsoftTask task = null;
        InfusionsoftTask response = api.createTaskUsingPOST(task);

        // TODO: test validations
    }
    
    /**
     * Delete a Task
     *
     * Permanently deletes a task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaskUsingDELETETest() throws ApiException {
        String taskId = null;
        api.deleteTaskUsingDELETE(taskId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Task
     *
     * Retrieves a single task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskUsingGETTest() throws ApiException {
        String taskId = null;
        InfusionsoftTask response = api.getTaskUsingGET(taskId);

        // TODO: test validations
    }
    
    /**
     * Search Tasks
     *
     * Retrieves Tasks belonging to the authenticated user using the specified search criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTasksForCurrentUserUsingGETTest() throws ApiException {
        Long contactId = null;
        Boolean hasDueDate = null;
        Long userId = null;
        String since = null;
        String until = null;
        Boolean completed = null;
        Integer limit = null;
        Integer offset = null;
        String order = null;
        InfusionsoftTaskList response = api.listTasksForCurrentUserUsingGET(contactId, hasDueDate, userId, since, until, completed, limit, offset, order);

        // TODO: test validations
    }
    
    /**
     * List Tasks
     *
     * Retrieves a list of all tasks using the specified search criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTasksUsingGETTest() throws ApiException {
        Long contactId = null;
        Boolean hasDueDate = null;
        Long userId = null;
        String since = null;
        String until = null;
        Boolean completed = null;
        Integer limit = null;
        Integer offset = null;
        String order = null;
        InfusionsoftTaskList response = api.listTasksUsingGET(contactId, hasDueDate, userId, since, until, completed, limit, offset, order);

        // TODO: test validations
    }
    
    /**
     * Retrieve Task Model
     *
     * Get the custom fields for the Task object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTaskModelUsingGETTest() throws ApiException {
        InfusionsoftObjectModel response = api.retrieveTaskModelUsingGET();

        // TODO: test validations
    }
    
    /**
     * Update a Task
     *
     * Updates a task with only the values provided in the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePropertiesOnTaskUsingPATCHTest() throws ApiException {
        String taskId = null;
        InfusionsoftTask task = null;
        InfusionsoftTask response = api.updatePropertiesOnTaskUsingPATCH(taskId, task);

        // TODO: test validations
    }
    
    /**
     * Replace a Task
     *
     * Replaces a task with the values provided in the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskUsingPUTTest() throws ApiException {
        String taskId = null;
        InfusionsoftTask task = null;
        InfusionsoftTask response = api.updateTaskUsingPUT(taskId, task);

        // TODO: test validations
    }
    
}
