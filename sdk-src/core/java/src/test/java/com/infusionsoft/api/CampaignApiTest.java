/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.89421
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiException;
import com.infusionsoft.model.InfusionsoftAchieveApiGoalEvent;
import com.infusionsoft.model.InfusionsoftCampaign;
import com.infusionsoft.model.InfusionsoftCampaignList;
import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftGoalEventResultDTO;
import com.infusionsoft.model.InfusionsoftSetOfIds;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CampaignApi
 */
@Ignore
public class CampaignApiTest {

    private final CampaignApi api = new CampaignApi();

    
    /**
     * Add to Campaign Sequence
     *
     * Adds a single contact to a campaign sequence
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addContactToCampaignSequenceUsingPOSTTest() throws ApiException {
        Long campaignId = null;
        Long sequenceId = null;
        Long contactId = null;
        api.addContactToCampaignSequenceUsingPOST(campaignId, sequenceId, contactId);

        // TODO: test validations
    }
    
    /**
     * Add Multiple to Campaign Sequence
     *
     * Adds a list of contacts to a campaign sequence
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addContactsToCampaignSequenceUsingPOSTTest() throws ApiException {
        Long campaignId = null;
        Long sequenceId = null;
        InfusionsoftSetOfIds ids = null;
        Map<String, String> response = api.addContactsToCampaignSequenceUsingPOST(campaignId, sequenceId, ids);

        // TODO: test validations
    }
    
    /**
     * Achieve API Goal
     *
     * Achieves API goal for campaigns with matching integration, callName for a given contactId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAchieveApiGoalEventUsingPOSTTest() throws ApiException {
        String integration = null;
        String callName = null;
        InfusionsoftAchieveApiGoalEvent goalEvent = null;
        List<InfusionsoftGoalEventResultDTO> response = api.createAchieveApiGoalEventUsingPOST(integration, callName, goalEvent);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Campaign
     *
     * Retrieves a single campaign
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignUsingGETTest() throws ApiException {
        Long campaignId = null;
        List<String> optionalProperties = null;
        InfusionsoftCampaign response = api.getCampaignUsingGET(campaignId, optionalProperties);

        // TODO: test validations
    }
    
    /**
     * List Campaigns
     *
     * Retrieves all campaigns for the authenticated user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCampaignsUsingGETTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String searchText = null;
        String order = null;
        String orderDirection = null;
        InfusionsoftCampaignList response = api.listCampaignsUsingGET(limit, offset, searchText, order, orderDirection);

        // TODO: test validations
    }
    
    /**
     * Remove from Campaign Sequence
     *
     * Removes a single contact from a campaign sequence
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeContactFromCampaignSequenceUsingDELETETest() throws ApiException {
        Long campaignId = null;
        Long sequenceId = null;
        Long contactId = null;
        api.removeContactFromCampaignSequenceUsingDELETE(campaignId, sequenceId, contactId);

        // TODO: test validations
    }
    
    /**
     * Remove Multiple from Campaign Sequence
     *
     * Removes a list of contacts from a campaign sequence
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeContactsFromCampaignSequenceUsingDELETETest() throws ApiException {
        Long campaignId = null;
        Long sequenceId = null;
        InfusionsoftSetOfIds ids = null;
        api.removeContactsFromCampaignSequenceUsingDELETE(campaignId, sequenceId, ids);

        // TODO: test validations
    }
    
}
