/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.70.0.89421
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiException;
import com.infusionsoft.model.InfusionsoftCreateTag;
import com.infusionsoft.model.InfusionsoftCreateTagCategory;
import com.infusionsoft.model.InfusionsoftEntrylongstring;
import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftSetOfIds;
import com.infusionsoft.model.InfusionsoftTag;
import com.infusionsoft.model.InfusionsoftTagCategory;
import com.infusionsoft.model.InfusionsoftTaggedCompanyList;
import com.infusionsoft.model.InfusionsoftTaggedContactList;
import com.infusionsoft.model.InfusionsoftTags;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
@Ignore
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    
    /**
     * Apply Tag to Contacts
     *
     * Apply a tag to a list of contacts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applyTagToContactIdsUsingPOSTTest() throws ApiException {
        Long tagId = null;
        InfusionsoftSetOfIds ids = null;
        List<InfusionsoftEntrylongstring> response = api.applyTagToContactIdsUsingPOST(tagId, ids);

        // TODO: test validations
    }
    
    /**
     * Create Tag Category
     *
     * Create a new tag category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTagCategoryUsingPOSTTest() throws ApiException {
        InfusionsoftCreateTagCategory tagCategory = null;
        InfusionsoftTagCategory response = api.createTagCategoryUsingPOST(tagCategory);

        // TODO: test validations
    }
    
    /**
     * Create Tag
     *
     * Create a new tag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTagUsingPOSTTest() throws ApiException {
        InfusionsoftCreateTag tag = null;
        InfusionsoftTag response = api.createTagUsingPOST(tag);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Tag
     *
     * Retrieves a single tag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagUsingGETTest() throws ApiException {
        Long id = null;
        InfusionsoftTag response = api.getTagUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * List Tagged Companies
     *
     * Retrieves a list of companies that have the given tag applied
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCompaniesForTagIdUsingGETTest() throws ApiException {
        Long tagId = null;
        Integer limit = null;
        Integer offset = null;
        InfusionsoftTaggedCompanyList response = api.listCompaniesForTagIdUsingGET(tagId, limit, offset);

        // TODO: test validations
    }
    
    /**
     * List Tagged Contacts
     *
     * Retrieves a list of contacts that have the given tag applied
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listContactsForTagIdUsingGETTest() throws ApiException {
        Long tagId = null;
        Integer limit = null;
        Integer offset = null;
        InfusionsoftTaggedContactList response = api.listContactsForTagIdUsingGET(tagId, limit, offset);

        // TODO: test validations
    }
    
    /**
     * List Tags
     *
     * Retrieve a list of tags defined in the application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTagsUsingGETTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        Long category = null;
        String name = null;
        InfusionsoftTags response = api.listTagsUsingGET(limit, offset, category, name);

        // TODO: test validations
    }
    
    /**
     * Remove Tag from Contact
     *
     * Remove a tag from a Contact
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTagFromContactIdUsingDELETETest() throws ApiException {
        Long tagId = null;
        Long contactId = null;
        api.removeTagFromContactIdUsingDELETE(tagId, contactId);

        // TODO: test validations
    }
    
    /**
     * Remove Tag from Contacts
     *
     * Remove a tag from a list of contacts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTagFromContactIdsUsingDELETETest() throws ApiException {
        Long tagId = null;
        List<Long> ids = null;
        api.removeTagFromContactIdsUsingDELETE(tagId, ids);

        // TODO: test validations
    }
    
}
